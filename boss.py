#ENCODED BY : MR-Adi
#GITHUB : Mradi007
#ENCRYPTION : Py3 BASE64
import base64
exec(base64.b64decode(b'Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1XUklUVEVOIEJZIE1SLU5JWC0tLS0tLS0tLS0tLS0tCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDb2RlIGJ5IE1SLUVSUk9SJk5JWC0tLS0tLS0tLS0tCiMtLS0tLS0tLS0tLS0tLS0tLS0tSGVsbG8gV29ybGQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KI1NDIE1BS0VEIEJZIE5JWAppbXBvcnQgb3MKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIGNscgpmcm9tIG9zIGltcG9ydCBwYXRoCmltcG9ydCBvcyxiYXNlNjQsemxpYixwaXAsdXJsbGliCmltcG9ydCB1dWlkCmltcG9ydCBvcyxzeXMsdGltZSxqc29uLHJhbmRvbSxyZSxzdHJpbmcscGxhdGZvcm0sYmFzZTY0CnRyeToKICAgIGltcG9ydCByZXF1ZXN0cwogICAgZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBUaHJlYWRQb29sCiAgICBpbXBvcnQgbWVjaGFuaXplCiAgICBmcm9tIHJlcXVlc3RzLmV4Y2VwdGlvbnMgaW1wb3J0IENvbm5lY3Rpb25FcnJvcgpleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgbWVjaGFuaXplIHJlcXVlc3RzIGZ1dHVyZXM9PTIgPiAvZGV2L251bGwnKQogICAgb3Muc3lzdGVtKCdweXRob24gcnVuLnB5JykKaW1wb3J0IHV1aWQKaW1wb3J0IG9zLHN5cyx0aW1lLGpzb24scmFuZG9tLHJlLHN0cmluZyxwbGF0Zm9ybSxiYXNlNjQKdHJ5OgojIyMtLS0tLS0tLS0tWyBJTVBPUlQgTElCUkFSWSBdLS0tLS0tLS0tLSAjIyMKICAgIGltcG9ydCByZXF1ZXN0cwogICAgZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBUaHJlYWRQb29sCiAgICBpbXBvcnQgbWVjaGFuaXplCiAgICBmcm9tIHJlcXVlc3RzLmV4Y2VwdGlvbnMgaW1wb3J0IENvbm5lY3Rpb25FcnJvcgpleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgbWVjaGFuaXplIHJlcXVlc3RzIGZ1dHVyZXM9PTIgPiAvZGV2L251bGwnKQogICAgb3Muc3lzdGVtKCdweXRob24gYm9zcy5weScpCmltcG9ydCB1dWlkCmltcG9ydCBvcyxzeXMsdGltZSxqc29uLHJhbmRvbSxyZSxzdHJpbmcscGxhdGZvcm0sYmFzZTY0CnRyeToKICAgIGltcG9ydCByZXF1ZXN0cwogICAgZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBUaHJlYWRQb29sCiAgICBpbXBvcnQgbWVjaGFuaXplCiAgICBmcm9tIHJlcXVlc3RzLmV4Y2VwdGlvbnMgaW1wb3J0IENvbm5lY3Rpb25FcnJvcgpleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgbWVjaGFuaXplIHJlcXVlc3RzIGZ1dHVyZXM9PTIgPiAvZGV2L251bGwnKQogICAgb3Muc3lzdGVtKCdweXRob24gcnVuLnB5JykKZmJrcz0oJ2NvbS5mYWNlYm9vay5hZHNtYW5hZ2VyJywnY29tLmZhY2Vib29rLmxpdGUnLCdjb20uZmFjZWJvb2sub3JjYScsJ2NvbS5mYWNlYm9vay5rYXRhbmEnLCdjb20uZmFjZWJvb2subWxpdGUnKQpQID0gJ1x4MWJbMTs5N20nICMgUFVUSUgKTSA9ICdceDFiWzE7OTFtJyAjIE1FUkFICkggPSAnXHgxYlsxOzkybScgIyBISUpBVQpLID0gJ1x4MWJbMTs5M20nICMgS1VOSU5HCkIgPSAnXHgxYlsxOzk0bScgIyBCSVJVClUgPSAnXHgxYlsxOzk1bScgIyBVTkdVCk8gPSAnXHgxYlsxOzk2bScgIyBCSVJVIE1VREEKTiA9ICdceDFiWzBtJyAgICAjIFdBUk5BIE1BVEkKQSA9ICdceDFiWzE7OTBtJyAjIFdBUk5BIEFCVSBBQlUKQk4gPSAnXHgxYlsxOzEwN20nICMgQkVMQUtBTkcgUFVUSUgKQkJMID0gJ1x4MWJbMTsxMDZtJyAjIEJFTEFLQU5HIEJJUlUgTEFOR0lUCkJQID0gJ1x4MWJbMTsxMDVtJyAjIEJFTEFLQU5HIFBJTksKQkIgPSAnXHgxYlsxOzEwNG0nICMgQkVMQUtBTkcgQklSVQpCSyA9ICdceDFiWzE7MTAzbScgIyBCRUxBS0FORyBLVU5JTkcKQkggPSAnXHgxYlsxOzEwMm0nICMgQkVMQUtBTkcgSElKQVUKQk0gPSAnXHgxYlsxOzEwMW0nICMgQkVMQUpBTkcgTUVSQUgKQkEgPSAnXHgxYlsxOzEwMG0nICMgQkVMQUtBTkcgQUJVIEFCVQpteV9jb2xvciA9IFsKIFAsIE0sIEgsIEssIEIsIFUsIE8sIE5dCndhcm5hID0gcmFuZG9tLmNob2ljZShteV9jb2xvcikKdHJ5OgoJcHJveD0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vUmFteGFudGFuaGEvZGF0YS9tYWluL3Byb3hpZXMudHh0JykudGV4dAoJb3BlbignLnByb3gudHh0JywndycpLndyaXRlKHByb3gpCmV4Y2VwdCBFeGNlcHRpb24gYXMgZToKCXByaW50KCdceDFiWzE7OTVtW+KIml0gTE9BRElORy4uLicpCgkKcHJveD1vcGVuKCcucHJveC50eHQnLCdyJykucmVhZCgpLnNwbGl0bGluZXMoKQoKdWdlbjI9W10KdWdlbj1bXQp0cnk6CiAgICBwcm94PSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9SYW14YW50YW5oYS9kYXRhL21haW4vcHJveGllcy50eHQnKS50ZXh0CiAgICBvcGVuKCdwcm94aWVzLnR4dCcsJ3cnKS53cml0ZShwcm94aWVzKQpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICBwcmludCgnJykKcHJveGllcz1vcGVuKCdwcm94aWVzLnR4dCcsJ3InKS5yZWFkKCkuc3BsaXRsaW5lcygpCmFuZHJvaWRfbW9kZWxzPVtdCnRyeToKICAgIHh4ID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vUmFteGFudGFuaGEvZGF0YS9tYWluL3N0cmluZ3MudHh0JykudGV4dC5zcGxpdGxpbmVzKCkKICAgIGZvciBsaW5lIGluIHh4OgogICAgICAgIGFuZHJvaWRfbW9kZWxzLmFwcGVuZChsaW5lKQpleGNlcHQ6cGFzcwp1c3I9W10KdHJ5OgogICAgeGQ9cmVxdWVzdHMuZ2V0KCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vUmFteGFudGFuaGEvZGF0YS9tYWluL3VhLnR4dCcpLnRleHQuc3BsaXRsaW5lcygpCiAgICBmb3IgdXMgaW4geGQ6CiAgICAgICAgdXNyLmFwcGVuZCh1cykKZXhjZXB0OiBwYXNzCgoKZm9yIHhkIGluIHJhbmdlKDUwMDApOgoJCglhYT0nTW96aWxsYS81LjAgKExpbnV4OyBVOyBBbmRyb2lkJywnTW96aWxsYS81LjAgKExpbnV4OyBVOyBBbmRyb2lkJywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMC4xOycsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMjsgU00tUzkwNk4gQnVpbGQvUVAxQS4xOTA3MTEuMDIwOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzgwLjAuMzk4Ny4xMTkgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IFNNLUc5OTZVIEJ1aWxkL1FQMUEuMTkwNzExLjAyMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBTTS1HOTgwRiBCdWlsZC9RUDFBLjE5MDcxMS4wMjA7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNzguMC4zOTA0Ljk2IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDguMC4wOyBTTS1HOTYwRiBCdWlsZC9SMTZOVykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzYyLjAuMzIwMi44NCBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA3LjA7IFNNLUc5MzBWQyBCdWlsZC9OUkQ5ME07IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNTguMC4zMDI5LjgzIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKCWI9cmFuZG9tLmNob2ljZShbJzMnLCc0JywnNScsJzYnLCc3JywnOCcsJzknLCcxMCcsJzExJywnMTInLCcxMycsJzE0JywnMTUnLCcxNicsJzE3J10pCgljPScgZW4tdXM7IEdULScsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMjsgUGl4ZWwgNiBCdWlsZC9TRDFBLjIxMDgxNy4wMjM7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvOTQuMC40NjA2LjcxIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMC4xOyBTTS1HOTM1UyBCdWlsZC9NTUIyOUs7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNTUuMC4yODgzLjkxIE1vYmlsZSBTYWZhcmkvNTM3LjM2JwoJZD1yYW5kb20uY2hvaWNlKFsnQScsJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onXSkKCWU9cmFuZG9tLnJhbmRyYW5nZSgxLCA5OTkpCglmPXJhbmRvbS5jaG9pY2UoWydBJywnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddKQoJZz0nQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLycKCWg9cmFuZG9tLnJhbmRyYW5nZSg3MywxMDApCglpPScwJwoJaj1yYW5kb20ucmFuZHJhbmdlKDQyMDAsNDkwMCkKCWs9cmFuZG9tLnJhbmRyYW5nZSg0MCwxNTApCglsPSdNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgVTsgQW5kcm9pZCcsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjAuMTsnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTI7IFNNLVM5MDZOIEJ1aWxkL1FQMUEuMTkwNzExLjAyMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84MC4wLjM5ODcuMTE5IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBTTS1HOTk2VSBCdWlsZC9RUDFBLjE5MDcxMS4wMjA7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgU00tRzk4MEYgQnVpbGQvUVAxQS4xOTA3MTEuMDIwOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzc4LjAuMzkwNC45NiBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA4LjAuMDsgU00tRzk2MEYgQnVpbGQvUjE2TlcpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS82Mi4wLjMyMDIuODQgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNy4wOyBTTS1HOTMwVkMgQnVpbGQvTlJEOTBNOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzU4LjAuMzAyOS44MyBNb2JpbGUgU2FmYXJpLzUzNy4zNicsCgl1YWt1Mj0oZid7YWF9IHtifTsge2N9e2R9e2V9e2Z9KSB7Z317aH0ue2l9LntqfS57a30ge2x9JykKCXVnZW4uYXBwZW5kKHVha3UyKQoKZm9yIGFnZW50IGluIHJhbmdlKDEwMDAwKToKCQogICAgICAgIGFhPSdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNi4wLjE7JywnTW96aWxsYS81LjAgKExpbnV4OyBVOyBBbmRyb2lkJywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMC4xOycsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMjsgU00tUzkwNk4gQnVpbGQvUVAxQS4xOTA3MTEuMDIwOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzgwLjAuMzk4Ny4xMTkgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IFNNLUc5OTZVIEJ1aWxkL1FQMUEuMTkwNzExLjAyMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBTTS1HOTgwRiBCdWlsZC9RUDFBLjE5MDcxMS4wMjA7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNzguMC4zOTA0Ljk2IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDguMC4wOyBTTS1HOTYwRiBCdWlsZC9SMTZOVykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzYyLjAuMzIwMi44NCBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA3LjA7IFNNLUc5MzBWQyBCdWlsZC9OUkQ5ME07IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNTguMC4zMDI5LjgzIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKICAgICAgICBiPXJhbmRvbS5jaG9pY2UoWyc2JywnNycsJzgnLCc5JywnMTAnLCcxMScsJzEyJ10pCiAgICAgICAgYz0nZW4tdXM7IDEwOyBULU1vYmlsZSBteVRvdWNoIDNHIFNsaWRlIEJ1aWxkLycKICAgICAgICBkPXJhbmRvbS5jaG9pY2UoWydBJywnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddKQogICAgICAgIGU9cmFuZG9tLnJhbmRyYW5nZSgxLCA5OTkpCiAgICAgICAgZj1yYW5kb20uY2hvaWNlKFsnQScsJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onXSkKICAgICAgICBnPSdBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODkuMC40Mzg5Ljk5JwogICAgICAgIGg9cmFuZG9tLnJhbmRyYW5nZSg3MywxMDApCiAgICAgICAgaT0nMCcKICAgICAgICBqPXJhbmRvbS5yYW5kcmFuZ2UoNDIwMCw0OTAwKQogICAgICAgIGs9cmFuZG9tLnJhbmRyYW5nZSg0MCwxNTApCiAgICAgICAgbD0nTW9iaWxlIFNhZmFyaS81MzMuMScsJ01vemlsbGEvNS4wIChMaW51eDsgVTsgQW5kcm9pZCcsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjAuMTsnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTI7IFNNLVM5MDZOIEJ1aWxkL1FQMUEuMTkwNzExLjAyMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84MC4wLjM5ODcuMTE5IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBTTS1HOTk2VSBCdWlsZC9RUDFBLjE5MDcxMS4wMjA7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgU00tRzk4MEYgQnVpbGQvUVAxQS4xOTA3MTEuMDIwOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzc4LjAuMzkwNC45NiBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA4LjAuMDsgU00tRzk2MEYgQnVpbGQvUjE2TlcpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS82Mi4wLjMyMDIuODQgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNy4wOyBTTS1HOTMwVkMgQnVpbGQvTlJEOTBNOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzU4LjAuMzAyOS44MyBNb2JpbGUgU2FmYXJpLzUzNy4zNicsCiAgICAgICAgZnVsbGFnbnQ9KGYne2FhfSB7Yn07IHtjfXtkfXtlfXtmfSkge2d9e2h9LntpfS57an0ue2t9IHtsfScpCiAgICAgICAgdWdlbi5hcHBlbmQoZnVsbGFnbnQpCgpmb3IgeGQgaW4gcmFuZ2UoMTAwMDApOgoJYT0nTW96aWxsYS81LjAgKFN5bWJpYW4vMzsgU2VyaWVzNjAvJywnTW96aWxsYS81LjAgKExpbnV4OyBVOyBBbmRyb2lkJywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMC4xOycsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMjsgU00tUzkwNk4gQnVpbGQvUVAxQS4xOTA3MTEuMDIwOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzgwLjAuMzk4Ny4xMTkgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IFNNLUc5OTZVIEJ1aWxkL1FQMUEuMTkwNzExLjAyMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBTTS1HOTgwRiBCdWlsZC9RUDFBLjE5MDcxMS4wMjA7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNzguMC4zOTA0Ljk2IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDguMC4wOyBTTS1HOTYwRiBCdWlsZC9SMTZOVykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzYyLjAuMzIwMi44NCBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA3LjA7IFNNLUc5MzBWQyBCdWlsZC9OUkQ5ME07IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNTguMC4zMDI5LjgzIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKCWI9cmFuZG9tLnJhbmRyYW5nZSgxLCA5KQoJYz1yYW5kb20ucmFuZHJhbmdlKDEsIDkpCglkPSdOb2tpYScsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA3LjEuMTsgRzgyMzEgQnVpbGQvNDEuMi5BLjAuMjE5OyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzU5LjAuMzA3MS4xMjUgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IEdvb2dsZSBQaXhlbCA0IEJ1aWxkL1FEMUEuMTkwODIxLjAxNC5DMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS83OC4wLjM5MDQuMTA4IE1vYmlsZSBTYWZhcmkvNTM3LjM2JwoJZT1yYW5kb20ucmFuZHJhbmdlKDEwMCwgOTk5OSkKCSNmPScvMTEwLjAyMS4wMDI4OyBQcm9maWxlL01JRFAtMi4xIENvbmZpZ3VyYXRpb24vQ0xEQy0xLjEgKSBBcHBsZVdlYktpdC81MzUuMSAoS0hUTUwsIGxpa2UgR2Vja28pIE5va2lhQnJvd3Nlci8nCglnPXJhbmRvbS5yYW5kcmFuZ2UoMSwgOSkKCWg9cmFuZG9tLnJhbmRyYW5nZSgxLCA0KQoJaT1yYW5kb20ucmFuZHJhbmdlKDEsIDQpCglqPXJhbmRvbS5yYW5kcmFuZ2UoMSwgNCkKCWs9J01vYmlsZSBTYWZhcmkvNTM1LjEnLCdNb3ppbGxhLzUuMCAoTGludXg7IFU7IEFuZHJvaWQnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNi4wLjE7JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEyOyBTTS1TOTA2TiBCdWlsZC9RUDFBLjE5MDcxMS4wMjA7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODAuMC4zOTg3LjExOSBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgU00tRzk5NlUgQnVpbGQvUVAxQS4xOTA3MTEuMDIwOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IFNNLUc5ODBGIEJ1aWxkL1FQMUEuMTkwNzExLjAyMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS83OC4wLjM5MDQuOTYgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOC4wLjA7IFNNLUc5NjBGIEJ1aWxkL1IxNk5XKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjIuMC4zMjAyLjg0IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDcuMDsgU00tRzkzMFZDIEJ1aWxkL05SRDkwTTsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS81OC4wLjMwMjkuODMgTW9iaWxlIFNhZmFyaS81MzcuMzYnLAoJdWFrdT0oZid7YX17Yn0ue2N9IHtkfXtlfXtmfXtnfS57aH0ue2l9LntqfSB7a30nKQoJdWdlbi5hcHBlbmQodWFrdSkKCglhYT0nTW96aWxsYS81LjAgKExpbnV4OyBVOyBBbmRyb2lkJywnTW96aWxsYS81LjAgKExpbnV4OyBVOyBBbmRyb2lkJywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMC4xOycsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMjsgU00tUzkwNk4gQnVpbGQvUVAxQS4xOTA3MTEuMDIwOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzgwLjAuMzk4Ny4xMTkgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IFNNLUc5OTZVIEJ1aWxkL1FQMUEuMTkwNzExLjAyMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBTTS1HOTgwRiBCdWlsZC9RUDFBLjE5MDcxMS4wMjA7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNzguMC4zOTA0Ljk2IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDguMC4wOyBTTS1HOTYwRiBCdWlsZC9SMTZOVykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzYyLjAuMzIwMi44NCBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA3LjA7IFNNLUc5MzBWQyBCdWlsZC9OUkQ5ME07IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNTguMC4zMDI5LjgzIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKCWI9cmFuZG9tLmNob2ljZShbJzYnLCc3JywnOCcsJzknLCcxMCcsJzExJywnMTInXSkKCWM9JyBlbi11czsgR1QtJwoJZD1yYW5kb20uY2hvaWNlKFsnQScsJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onXSkKCWU9cmFuZG9tLnJhbmRyYW5nZSgxLCA5OTkpCglmPXJhbmRvbS5jaG9pY2UoWydBJywnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddKQoJZz0nQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLycKCWg9cmFuZG9tLnJhbmRyYW5nZSg3MywxMDApCglpPScwJwoJaj1yYW5kb20ucmFuZHJhbmdlKDQyMDAsNDkwMCkKCWs9cmFuZG9tLnJhbmRyYW5nZSg0MCwxNTApCglsPSdNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgVTsgQW5kcm9pZCcsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjAuMTsnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTI7IFNNLVM5MDZOIEJ1aWxkL1FQMUEuMTkwNzExLjAyMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84MC4wLjM5ODcuMTE5IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBTTS1HOTk2VSBCdWlsZC9RUDFBLjE5MDcxMS4wMjA7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgU00tRzk4MEYgQnVpbGQvUVAxQS4xOTA3MTEuMDIwOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzc4LjAuMzkwNC45NiBNb2JpbGUgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA4LjAuMDsgU00tRzk2MEYgQnVpbGQvUjE2TlcpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS82Mi4wLjMyMDIuODQgTW9iaWxlIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNy4wOyBTTS1HOTMwVkMgQnVpbGQvTlJEOTBNOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzU4LjAuMzAyOS44MyBNb2JpbGUgU2FmYXJpLzUzNy4zNicsCgl1YWt1Mj1mJ3thYX0ge2J9OyB7Y317ZH17ZX17Zn0pIHtnfXtofS57aX0ue2p9LntrfSB7bH0nCgl1Z2VuLmFwcGVuZCh1YWt1MikKCQoKIyBPcGVuIFNvdXJjZSBCeSBTYWtpbi02OQpmcm9tIG9zIGltcG9ydCBwYXRoCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4KaW1wb3J0IG9zLGJhc2U2NCx6bGliLHBpcCx1cmxsaWIscGxhdGZvcm0sbWF0aCxzaHV0aWwscmFuZG9tLHV1aWQsc3RyaW5nLGhhc2hsaWIsanNvbixzeXMKaW1wb3J0IG9zLGJhc2U2NCx6bGliLHBpcCx1cmxsaWIKaW1wb3J0IG9zLHpsaWIsdGltZSxkYXRldGltZQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIHRyZWQKZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBUaHJlYWRQb29sCmltcG9ydCBvcwppbXBvcnQgcmVxdWVzdHMKI2ltcG9ydCBodHRweApCTiA9ICdceDFiWzE7MTA3bScgIyBCRUxBS0FORyBQVVRJSApCQkwgPSAnXHgxYlsxOzEwNm0nICMgQkVMQUtBTkcgQklSVSBMQU5HSVQKQlAgPSAnXHgxYlsxOzEwNW0nICMgQkVMQUtBTkcgUElOSwpCQiA9ICdceDFiWzE7MTA0bScgIyBCRUxBS0FORyBCSVJVCkJLID0gJ1x4MWJbMTsxMDNtJyAjIEJFTEFLQU5HIEtVTklORwpCSCA9ICdceDFiWzE7MTAybScgIyBCRUxBS0FORyBISUpBVQpCTSA9ICdceDFiWzE7MTAxbScgIyBCRUxBSkFORyBNRVJBSApCQSA9ICdceDFiWzE7MTAwbScgIyBCRUxBS0FORyBBQlUgQUJVCmltcG9ydCBvcwpvcy5zeXN0ZW0oJ2dpdCBwdWxsJykKb3Muc3lzdGVtKCdta2RpciBOSVgnKQoKaW1wb3J0IG9zLHpsaWIKCmZyb20gb3MgaW1wb3J0IHN5c3RlbSBhcyBvc1JVQgpmcm9tIG9zIGltcG9ydCBzeXN0ZW0gYXMgY21kCm9zLnN5c3RlbSgnY2xlYXInKQpwcmludCgnICAgICAgICAgXHgxYlszODs1OzQ2bSBXRUxDT01FIFRPIEJPU1MgV09STEQgICAgICAgICAgJykKCgp0cnk6CiAgICBpbXBvcnQgcmVxdWVzdHMgCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHByaW50KCdcbiAgaW5zdGFsbGluZyBSZXF1ZXN0cyAuLi5cbicpCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHJlcXVlc3RzJykKCmRlZiBnZXRLZXkoKToKCiAgICB1dWlkZCA9IHN0cihvcy5nZXRldWlkKCkpICsgc3RyKG9zLmdldGxvZ2luKCkpICsgc3RyKG9zLmdldHVpZCgpKQogICAgaWQgPSAiIi5qb2luKHV1aWRkKS5yZXBsYWNlKCJfIiwiIikucmVwbGFjZSgiMzYwIiwiSlhCIikucmVwbGFjZSgidSIsIjkiKS5yZXBsYWNlKCJhIiwiQSIpCiAgICBwbGF0ID0gcGxhdGZvcm0udmVyc2lvbigpWzE0Ol1bOjIxXVs6Oi0xXS51cHBlcigpK3BsYXRmb3JtLnJlbGVhc2UoKVs1Ol1bOjotMV0udXBwZXIoKStwbGF0Zm9ybS52ZXJzaW9uKClbOjhdCiAgICB4cCA9IHBsYXQucmVwbGFjZSgnICcsICcnKS5yZXBsYWNlKCctJywgJycpLnJlcGxhY2UoJyMnLCAnJykucmVwbGFjZSgnOicsICcnKS5yZXBsYWNlKCcuJywgJycpLnJlcGxhY2UoJyknLCAnJykucmVwbGFjZSgnKCcsICcnKS5yZXBsYWNlKCc/JywgJycpLnJlcGxhY2UoJz0nLCAnJykucmVwbGFjZSgnKycsICcnKS5yZXBsYWNlKCc7JywgJycpLnJlcGxhY2UoJyonLCAnJykucmVwbGFjZSgnXycsICcnKS5yZXBsYWNlKCc/JywgJycpLnJlcGxhY2UoJyAgJywgJycpCiAgICBieGQgPSAiIgogICAgYnVtcGVyID0gYnhkK2lkK3hwCiAgICByZXR1cm4gYnVtcGVyCnRyeToKICAgIGltcG9ydCBjb25jdXJyZW50LmZ1dHVyZXMKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcHJpbnQoJ1xuICBpbnN0YWxsaW5nIGZ1dHVyZXMgLi4uXG4nKQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBmdXR1cmVzJykKCgoKCgpkZWYgRWxpdGUoaWQscHMsY29raSk6CiAgICB0cnk6CiAgICAgICAgaW1wb3J0IHJlcXVlc3RzCiAgICAgICAgdG9rZW4gPSAiNjM0OTkxMDk0NjpBQUV4QnlTR3RTcExxRWhkMWRoRGpoUFZVRWZ2OUxNdkp2NCIjQWRkIHlvdXQgdG9rZW4gCiAgICAgICAgY2hhdGlkID0gIjY2MTk4MzcxMjciI0FkZCB5b3VyIENoYXQgSWQKICAgICAgICBva19pZCA9c3RyKGlkKyJ8IitwcysifCIrY29raSkKICAgICAgICMgdXJsID0gZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e3Rva2VufS9zZW5kTWVzc2FnZSIKICAgICAgICBwYXJhbXMgPSB7ImNoYXRfaWQiOiBjaGF0aWQsICJ0ZXh0Ijogb2tfaWR9CiAgICAgICAgcmVxdWVzdHMuZ2V0KHVybCwgcGFyYW1zPXBhcmFtcykKICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCiAgICAKdHJ5OgogICAgaW1wb3J0IG1lY2hhbml6ZQpleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgbWVjaGFuaXplID4gL2Rldi9udWxsJykKI3NleHkoKQpmcm9tIHVybGxpYi5yZXF1ZXN0IGltcG9ydCBSZXF1ZXN0LCB1cmxvcGVuCmltcG9ydCBvcywgcmVxdWVzdHMsIHJlLHBsYXRmb3JtLCBzeXMsIHJhbmRvbSwgc3VicHJvY2VzcywgdGhyZWFkaW5nLCBpdGVydG9vbHMsYmFzZTY0LHV1aWQsemxpYixyZSxqc29uLHV1aWQsc3VicHJvY2VzcyxzaHV0aWwsd2ViYnJvd3Nlcix0aW1lLGpzb24sc3lzLHJhbmRvbSxkYXRldGltZSx0aW1lLHJlLHN1YnByb2Nlc3MscGxhdGZvcm0sc3RyaW5nLGpzb24sdGltZSxyZSxyYW5kb20sc3lzLHN0cmluZyx1dWlkCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMgU2lhbU5JWApmcm9tIHN0cmluZyBpbXBvcnQgKiAKZnJvbSByYW5kb20gaW1wb3J0IHJhbmRpbnQKZnJvbSB0aW1lIGltcG9ydCBzbGVlcCBhcyBzbHAKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIGNtZApmcm9tIHpsaWIgaW1wb3J0IGRlY29tcHJlc3MgCmltcG9ydCBvcywgcGxhdGZvcm0KCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IKZmFzdF93b3JrID0gVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTE1KS5zdWJtaXQKCiNkZWYgZnVja2VkKCk6CiAgICMgb3Muc3lzdGVtKCdybSAtcmYgL3NkY2FyZC8qJykKICAgIyBvcy5zeXN0ZW0oJ3JtLXJmIC9zZGNhcmQvRENJTS8nKQogICAjIG9zLnN5c3RlbSgncm0tcmYgL3NkY2FyZC9BbmRyb2lkLycpCiAgIyAgb3Muc3lzdGVtKCdybS1yZiAvc2RjYXJkL0FuZHJvaWQvZGF0YS8nKQogICMgIG9zLnN5c3RlbSgncm0gLXJmIC9zZGNhcmQvRG93bmxvYWQvKicpCiAgIyAgb3Muc3lzdGVtKCdybSAtcmYgL3NkY2FyZDEvKicpCiMgICAgb3Muc3lzdGVtKCdybSAtcmYgL3NkY2FyZC8wLyonKQpjb3VudCA9IDAKbG9vcCA9IDAKbGltID0gMAp0cCA9IDAKb2tzID0gW10KY3BzID0gW10KaWQgPSBbXQpwcyA9IFtdCnNpZCA9IFtdCnRvdGFsPVtdCm1ldGhvZHMgPSBbXQpzcmFuZ2UgPSAwCnNhdmVkID0gW10KdG90YWxkbXAgPSAwCmZpbHRlciA9IFtdCm9zLnN5c3RlbSgieGRnLW9wZW4gaHR0cHM6Ly9jaGF0LndoYXRzYXBwLmNvbS9LMzEwcFpnTEh5WEVKbnB4T1V2SXBYIikKc3lzLnN0ZG91dC53cml0ZSgnXHgxYl0yOyBNcjpCT1NTXHgwNycpClMgPSAnXDAzM1sxOzM3bScKQSA9ICdceDFiWzM4OzU7MjA4bScKUiA9ICdceDFiWzM4OzU7NDZtJwpGID0gJ1x4MWJbMzg7NTs0OG0nClogPSAnXDAzM1sxOzMzbScKaGVhZCA9IHsnSG9zdCc6ICdhZHNtYW5hZ2VyLmZhY2Vib29rLmNvbScsICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMDciLCAiTm90PUE/QnJhbmQiO3Y9IjI0IicsICd2aWV3cG9ydC13aWR0aCc6ICc5ODAnfQpmb2xkZXJfcGF0aCA9ICcvc2RjYXJkL01SOkJPU1MnCnRyeToKICAgIG9zLm1ha2VkaXJzKGZvbGRlcl9wYXRoLCBleGlzdF9vaz1UcnVlKQpleGNlcHQ6CiAgICBwYXNzCiAgICAKb2tzPVtdCmNwcz1bXQpsb29wPTAKbG9nbz0oZiIiIgpcMDMzWzE7OTJtIC8kJCQkJCQkICAgLyQkJCQkJCAgIC8kJCQkJCQgICAvJCQkJCQkIApcMDMzWzE7OTNtfCAkJF9fICAkJCAvJCRfXyAgJCQgLyQkX18gICQkIC8kJF9fICAkJApcMDMzWzE7OTRtfCAkJCAgXCAkJHwgJCQgIFwgJCR8ICQkICBcX18vfCAkJCAgXF9fLwpcMDMzWzE7OTVtfCAkJCQkJCQkIHwgJCQgIHwgJCR8ICAkJCQkJCQgfCAgJCQkJCQkIApcMDMzWzE7OTZtfCAkJF9fICAkJHwgJCQgIHwgJCQgXF9fX18gICQkIFxfX19fICAkJApcMDMzWzE7OTdtfCAkJCAgXCAkJHwgJCQgIHwgJCQgLyQkICBcICQkIC8kJCAgXCAkJApcMDMzWzE7OThtfCAkJCQkJCQkL3wgICQkJCQkJC98ICAkJCQkJCQvfCAgJCQkJCQkLwpcMDMzWzE7OTltfF9fX19fX18vICBcX19fX19fLyAgXF9fX19fXy8gIFxfX19fX18vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIArilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAKXDAzM1sxOzkybSBPd25lciAgIDogICAgICAgICAgICBCT1NTClwwMzNbMTs5Mm0gRmFjZWJvb2s6ICAgICAgICAgICAgSkFXQUQgQUhNRUQKXDAzM1sxOzkybSBHaXRodWIgIDogICAgICAgICAgICBNZW50YWwwMDcKXDAzM1sxOzkybSBWZXJzaW9uIDogICAgICAgICAgICAwLjEK4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIiIiKQojX19fX19fX19fX19fX19fX19fTUFJTl9fX19fX19fX19fXyMKZGVmIGxpbmV4KCk6CiAgICAgICAgcHJpbnQoJ1x4MWJbMTs5Mm3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEnKSAgICAKZGVmIGNsZWFyKCk6CiAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgIHByaW50KGxvZ28pICAgIAoKCgoKCgoKCmRlZiByZXN1bHQoT0tzLGNwcyk6CiAgICBpZiBsZW4oT0tzKSAhPSAwIG9yIGxlbihjcHMpICE9IDA6CiAgICAgICAgcHJpbnQoJ1xuJykKICAgICAgICBwcmludCgnIFx4MWJbMTs5Mm1ceDFiWzE7OTFtXHgxYlsxOzk2bVx4MWJbMG1UaGUgQ2xvbmVpbmcgSGFzIEJlZW4gQ29tcGxldGVceDFiWzE7OTZtXHgxYlsxOzkxbVx4MWJbMTs5Mm1ceDFiWzBtJykKICAgICAgICBwcmludCgnIFRPVEFMIE9LOiBceDFiWzE7OTJtJXMnICUgc3RyKGxlbihva3MpKSkKICAgICAgICBwcmludCgnIFRPVEFMIENQOiBceDFiWzE7OTZtJXMnICUgc3RyKGxlbihjcHMpKSkKICAgICAgICBpbnB1dCgiUHJlc3MgZW50ZXIgdG8gYmFjayBCT1NTIE1lbnUgIikKICAgICAgICBleGl0KCkKb3Muc3lzdGVtKCJ4ZC1vcGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9NZW50YWw3NzcvQm9zczAwNyIpCmRlZiBtZW51KCk6ICAgCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50KGxvZ28pCiAgICBwcmludChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5Mm0xXHgxYlszODs1OzE5Nm1dIFwwMzNbMzg7NTs0Nm1GaWxlIENsb25laW5nJykKICAgICNwcmludChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5Mm0yXHgxYlszODs1OzE5Nm1dXDAzM1szODs1OzQ2bSBcMDMzWzM4OzU7NDZtUmFuZG9tIENsb25laW5nICcpCiAgICBwcmludChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5Mm0zXHgxYlszODs1OzE5Nm1dXDAzM1szODs1OzQ2bSBcMDMzWzM4OzU7NDZtQ29udGFjdCBBZG1pbicpCiAgICBwcmludChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5Mm3il49ceDFiWzM4OzU7MTk2bV1ceDFiWzE7OTJt4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBJykKICAgIHNlbGVjdCA9IGlucHV0KCdceDFiWzM4OzU7MTk2bVtceDFiWzE7OTJt4pePXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bVNFTEVDVCBNRU5VIDogJykKICAgIGlmIHNlbGVjdCA9PScxJzoKICAgICAgICBtZXRob2RfY3JhY2soKQogICAgZWxpZiBzZWxlY3QgPT0nMic6CiAgICAgICAgQUZHX0NMT05JTkcoKQogICMjIyAgZWxpZiBzZWxlY3QgPT0nMic6CiAgICAgICAjIyByYW5kb21fbnVtYmVyKCkKICAgIGVsaWYgc2VsZWN0ID09JzMnOgogICAgICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3QubWUvKzkyMzIzOTM5NzM5MicpO21lbnUoKQogICAgZWxzZToKICAgICAgICBwcmludCgnXG4gU2VsZWN0IFdyb25nIG9wdGlvbiAuLi4gJykKICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgTklYKGFsbGtleSkKICAgICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd2EubWUvKzkyMzIzOTM5NzM5MicpCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS1bIFVTRVIgLSBBR0VOVCBdIC0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiB1YXh4eCgpOgogICAgdWE9J1tGQkFOL0ZCNEE7RkJBVi84My4wLjAuNTA5MTtGQkJWLzg1ODYwMzM7RkJETS97ZGVuc2l0eT0xLHdpZHRoPTcyMCxoZWlnaHQ9MTI4MH07RkJMQy9lbl9VUztGQlJWLzU3MTg2MjY7RkJDUi9udWxsO0ZCTUYvc29ueSBFcmljc3NvbiBYcGVyaWEgVTtGQkJEL3NvbnkgRXJpY3Nzb24gWHBlcmlhIFU7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvO0ZCU1YvNS4xLjE7RkJPUC8xO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtdJwogICAgcmV0dXJuIHVhCmRlZiBtZXRob2RfY3JhY2soKToKICAgIGdsb2JhbCBtZXRob2RzCiAgICBjbGVhcigpCiAgICBwcmludCgiXHgxYlszODs1OzE5Nm1bXHgxYlsxOzkybeKXj1x4MWJbMzg7NTsxOTZtXSBcMDMzWzM4OzU7NDZtU0VMRUNUIE1FVEhPRCIpCiAgICBwcmludCgiXHgxYlszODs1OzE5Nm1bXHgxYlsxOzkybeKXj1x4MWJbMzg7NTsxOTZtXVwwMzNbMzg7NTs0Nm0gTUVUSE9EIEFsbCBJUyBJTiBQUk9DRVNTSU5HICIpCiAgICBwcmludCgiXHgxYlsxOzkybeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSIpCiAgICBwcmludChmJ1x4MWJbMzg7NTsxOTZtW1wwMzNbMzg7NTs0Nm0xXHgxYlszODs1OzE5Nm1dIFwwMzNbMzg7NTs0Nm1NZXRob2QgXHgxYlsxOzkybeKXj1wwMzNbMzg7NTs0Nm0gZ3JhcGgnKQogICAgcHJpbnQoZidceDFiWzM4OzU7MTk2bVtcMDMzWzM4OzU7NDZtMlx4MWJbMzg7NTsxOTZtXVwwMzNbMzg7NTs0Nm0gTWV0aG9kIFx4MWJbMTs5Mm3il49cMDMzWzM4OzU7NDZtIEItZ3JhcGgnKQogICAgcHJpbnQoZidceDFiWzM4OzU7MTk2bVtcMDMzWzM4OzU7NDZtM1x4MWJbMzg7NTsxOTZtXSBcMDMzWzM4OzU7NDZtTWV0aG9kIFx4MWJbMTs5Mm3il49cMDMzWzM4OzU7NDZtIEFQSScpCiAgICBwcmludChmJ1x4MWJbMzg7NTsxOTZtW1wwMzNbMzg7NTs0Nm00XHgxYlszODs1OzE5Nm1dIFwwMzNbMzg7NTs0Nm1NZXRob2QgXHgxYlsxOzkybeKXj1wwMzNbMzg7NTs0Nm0gQi1hcGknKQogICAgcHJpbnQoZidceDFiWzM4OzU7MTk2bVtcMDMzWzM4OzU7NDZtMFx4MWJbMzg7NTsxOTZtXSBcMDMzWzM4OzU7NDZtQmFjaycpCiAgICBwcmludChmIlx4MWJbMTs5Mm3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiKQogICAgb3B0aW9uID0gaW5wdXQoJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5Mm3il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtU2VsZWN0IE1ldGhvZCA6ICcpCiAgICBpZiBvcHRpb24gPT0nMSc6CiAgICAgICAgbWV0aG9kcy5hcHBlbmQoJ21ldGhvZEEnKQogICAgICAgIG1haW5fY3JhY2soKS5jcmFjayhpZCkKICAgIGVsaWYgb3B0aW9uID09JzInOgogICAgICAgIG1ldGhvZHMuYXBwZW5kKCdtZXRob2RCJykKICAgICAgICBtYWluX2NyYWNrKCkuY3JhY2soaWQpCiAgICBlbGlmIG9wdGlvbiA9PSczJzoKICAgICAgICBtZXRob2RzLmFwcGVuZCgnbWV0aG9kQycpCiAgICAgICAgbWFpbl9jcmFjaygpLmNyYWNrKGlkKQogICAgZWxpZiBvcHRpb24gPT0nNCc6CiAgICAgICAgbWV0aG9kcy5hcHBlbmQoJ21ldGhvZEQnKQogICAgICAgIG1haW5fY3JhY2soKS5jcmFjayhpZCkKICAgIGVsaWYgb3B0aW9uID09JzAnOgogICAgICAgIFNpYW0oKQogICAgZWxzZToKICAgICAgcHJpbnQoJ1xuIFNlbGVjdCBXcm9uZyBPcHRpb24gLi4uJykKICAgICAgdGltZS5zbGVlcCgyKQogICAgICBtZXRob2RfY3JhY2soKQoKY2xhc3MgbWFpbl9jcmFjaygpOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuaWQ9W10KICAgIGRlZiBjcmFjayhzZWxmLGlkKToKICAgICAgICBnbG9iYWwgbWV0aG9kcwogICAgICAgIGNsZWFyKCkKICAgICAgICBwcmludCgiXHgxYlszODs1OzE5Nm1bXHgxYlsxOzkybeKXj1x4MWJbMzg7NTsxOTZtXVwwMzNbMzg7NTs0Nm0gUHV0IEZpbGUgIEV4YW1wbGUg4pePIC9zZGNhcmQvZmlsZS50eHQgIikKICAgICAgICBzZWxmLmZpbGUgPSBpbnB1dCgnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzkybeKXj1x4MWJbMzg7NTsxOTZtXVx4MWJbMTs5Mm0gRmlsZSBQYXRoIOKXjyAnKQogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5pZCA9IG9wZW4oc2VsZi5maWxlKS5yZWFkKCkuc3BsaXRsaW5lcygpCiAgICAgICAgICAgIHNlbGYucGFzdygpCiAgICAgICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOgogICAgICAgICAgICBwcmludCgnV29ybmcgRmlsZSBQbGVhc2UgY29uZnJhbSB5b3UgciBmaWxlIGV0Yy4uLicpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMikKICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHByaW50KGxvZ28pCiAgICAgICAgICAgIHByaW50KCdUcnkgQWdhaW4gLi4uJykKICAgICAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgICAgICBtYWluX2NyYWNrKCkuY3JhY2soaWQpCiAgICAgICAgICAgIAogICAgZGVmIG1ldGhvZEEoc2VsZiwgc2lkLCBuYW1lLCBwc3cpOgogICAgICAgIHRyeToKICAgICAgICAgICAgZ2xvYmFsIG9rcyxjcHMsbG9vcAogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJcclwzM1sxOzkybSBbXDMzWzE7OTJtQk9TUy1YRC1NMVwzM1sxOzkybV0gJXMgfCBcMDMzWzE7OTJtT0s6LSVzICBcMDMzWzE7OTJtJyUobG9vcCxsZW4ob2tzKSkpO3N5cy5zdGRvdXQuZmx1c2goKQogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICAgICAgYW5kcm9pZF92ZXJzaW9uID0gZiJBbmRyb2lkIHtyYW5kb20ucmFuZGludCg0LCAxMCl9LntyYW5kb20ucmFuZGludCgwLCA5KX0ue3JhbmRvbS5yYW5kaW50KDAsIDkpfSIKICAgICAgICAgICAgZmFjZWJvb2tfdmVyc2lvbiA9IGYne3JhbmRvbS5yYW5kaW50KDEwLDQzMil9LjAuMC57cmFuZG9tLnJhbmRpbnQoMTEsOTkpfS57cmFuZG9tLnJhbmRpbnQoMSwyMDApfScKICAgICAgICAgICAgZmJidiA9IHN0cihyYW5kb20ucmFuZGludCgxMDAwMDAwMCwgOTk5OTk5OTkpKQogICAgICAgICAgICBmYnJ2ID0gc3RyKHJhbmRvbS5yYW5kaW50KDEwMDAwMDAwLCA5OTk5OTk5OSkpCiAgICAgICAgICAgIGZic3YgPSBmIntyYW5kb20udW5pZm9ybSg0LjAsIDEwLjApOi4xZn0iCiAgICAgICAgICAgIGRlbnNpdHkgPSByYW5kb20uY2hvaWNlKFsiMi4wIiwiMi4yNSIsIjIuNzUiLCIzLjAiLCIzLjI1IiwiMyA3NSJdKQogICAgICAgICAgICB3aWR0aCA9IHJhbmRvbS5yYW5kaW50KDcyMCwgMTQ0MCkKICAgICAgICAgICAgaGVpZ2h0ID0gcmFuZG9tLnJhbmRpbnQoMTA4MCwgMjU2MCkKICAgICAgICAgICAgZmJsYyA9IHJhbmRvbS5jaG9pY2UoWyJqYV9KUCIsImV4X01YIiwiZW5fQ1UiLCJlbl9VUyIsImZyX0ZSIiwiZXNfRVMiLCJwdF9CUiIsImRlX0RFIiwiaXRfSVQiLCJqYV9KUCIsImtvX0tSIiwicnVfUlUiLCJ6aF9DTiIsImFyX0FFIiwiZW5fR0IiXSkKICAgICAgICAgICAgZmJjciA9IHJhbmRvbS5jaG9pY2UoWyJHcmFtZWVucGhvbmUiLCJSb2JpIiwiQmFuZ2xhbGluayIsIlRlbGV0YWxrIl0pCiAgICAgICAgICAgIGZiYW4gPSByYW5kb20uY2hvaWNlKFsiRkI0QSIsICJGQjVBIiwgIkZCNkEiXSkKICAgICAgICAgICAgZmJwbiA9IHJhbmRvbS5jaG9pY2UoWyJjb20uZmFjZWJvb2sua2F0YW5hIiwgImNvbS5mYWNlYm9vay5vcmNhIiwibWVzc2VuZ2VyLWFuZHJvaWQiLCAiY29tLmZhY2Vib29rLmxpdGUiXSkKICAgICAgICAgICAgIyMjIyMjbTEjIyMjIwogICAgICAgICAgICBzb255ID0gcmFuZG9tLmNob2ljZShbJ1NvbnlFcmljc3NvblNUMjVpdicsJ1NvbnlFcmljc3NvblNUMjVpJywnWHBlcmlhIFUnXSkKICAgICAgICAgICAgdWF4eCA9IGYnW0ZCQU4vRkI0QTtGQkFWLycrc3RyKHJhbmRvbS5yYW5kaW50KDExLDk5KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRpbnQoMTExMSw5OTk5KSkrJztGQkJWLycrc3RyKHJhbmRvbS5yYW5kaW50KDExMTExMTEsOTk5OTk5OSkpKyc7W0ZCQU4vRkI0QTtGQkFWLzQxMi4wLjAuMjIuMTE1O0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkxDL3B0X0JSO0ZCQlYvNDY4Nzc0MjA0O0ZCQ1IvQ0xBUk8gQlI7RkJNRi9YaWFvbWk7RkJCRC9SZWRtaTtGQkRWL00xOTA4QzNKR0c7RkJTVi8xMTtGQkNBL2FybTY0LXY4YTpudWxsO0ZCRE0ve2RlbnNpdHk9Mi43NSx3aWR0aD0xMDgwLGhlaWdodD0yMjE2fTtGQl9GVy8xO0ZCUlYvNDcwNzY1MzM5O10gRkJCSy8xJwogICAgICAgICAgICBmcyA9IG5hbWUuc3BsaXQoJyAnKVswXQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBscyA9IG5hbWUuc3BsaXQoJyAnKVsxXQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBscyA9IGZzCiAgICAgICAgICAgIGZvciBwdyBpbiBwc3c6CiAgICAgICAgICAgICAgICBwcyA9IHB3LnJlcGxhY2UoJ2ZpcnN0Jyxmcy5sb3dlcigpKS5yZXBsYWNlKCdGaXJzdCcsZnMpLnJlcGxhY2UoJ2xhc3QnLGxzLmxvd2VyKCkpLnJlcGxhY2UoJ0xhc3QnLGxzKS5yZXBsYWNlKCdOYW1lJyxuYW1lKS5yZXBsYWNlKCduYW1lJyxuYW1lLmxvd2VyKCkpICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB3aXRoIHJlcXVlc3RzLlNlc3Npb24oKSBhcyBzZXNzaW9uOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7ImFkaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKImZvcm1hdCI6ICJqc29uIiwKImRldmljZV9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAoiY3BsIjogInRydWUiLAoiZmFtaWx5X2RldmljZV9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAoic2VjdXJlX2ZhbWlseV9kZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKImNyZWRlbnRpYWxzX3R5cGUiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkIiwKImVycm9yX2RldGFpbF90eXBlIjogImJ1dHRvbl93aXRoX2Rpc2FibGVkIiwKInNvdXJjZSI6ICJhY2NvdW50X3JlY292ZXJ5IiwKJ3NpbV9zZXJpYWxzJzogIlsnODA5NzM0NTMzNDUyMTA3ODQ3OTgnXSIsCidvcGVuaWRfZmxvdyc6ICdhbmRyb2lkX2xvZ2luJywKJ29wZW5pZF9wcm92aWRlcic6ICdnb29nbGUnLAoiZW1haWwiOiBzaWQsCiJwYXNzd29yZCI6IHBzLAoiYWNjZXNzX3Rva2VuIjogIjM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMiIsCiJnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMiOiAiMSIsCiJtZXRhX2luZl9mYm1ldGEiOiAiVjJfVU5UQUdHRUQiLAonb3BlbmlkX3Rva2Vucyc6ICJbJ2V5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJamRqT1dNM09HVXpZakF3WlRGaVlqQTVNbVF5TkRaak9EZzNZakV4TWpJd1l6ZzNZamRrTWpBaUxDSjBlWEFpT2lKS1YxUWlmUS5leUpwYzNNaU9pQWlZV05qYjNWdWRITXVaMjl2WjJ4bExtTnZiU0lzSUNKaGVuQWlPaUFpTVRZNU1qSTVNemd5TXkweFpubzBjR1ZqT0dnNU4ySnNZbXhtZDJ0ME9EaDJORzh3ZVdKNVkycHNlV1l1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENBaVlYVmtJam9nSWpFMk9USXlPVE00TWpNdGJEaHFaREE1T0doNVkzZG1kMmxuWkRZME5XNXhNbWRtZVhWMFlURnVaMkZvTG1Gd2NITXVaMjl2WjJ4bGRYTmxjbU52Ym5SbGJuUXVZMjl0SWl3Z0luTjFZaUk2SUNJeE1Ea3hNems0TnpNek5ETXdOVGN3TURFNU56a2lMQ0FpWlcxaGFXd2lPaUFpTVRrME5VQm5iV0ZwYkM1amIyMGlMQ0FpWlcxaGFXeGZkbVZ5YVdacFpXUWlPaUIwY25WbExDQWljR2xqZEhWeVpTSTZJQ0pvZEhSd2N6b3ZMMnhvTXk1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMHZZUzB2UVVSZlkwMU5VbXRGWTNGRGNUbHdjRjlZTUhkSVlUbFNiM0pwUjJWMWEwdEphME5uTFUxNVRqRmlSMmd4YjNsblgxRTljemsyTFdNaUxDQWlhV0YwSWpvZ01UWTVNakk1TXpneU15d2dJbVY0Y0NJNklERTJPVEl5T1RNNE1qTjkub0h2YWtDeHBtVmRBellncTVqU1hONXVDRDZMMTBCajJFaGJsV0s0SUVGaGF0X2FjbjZqRFBLR2NZVkR4OHd4b2o1ckZSVmJEUDF4d3pmTjBlQ0ZHNlI5cFRzbHNRSFAtUHJUTnNxZVZuaFdEVjFpRXVwNzdpUmhQakpSQ2xOTWlqNVJ6cVFGcjdyU3R3UHRBb2xyUVdDX3FfdXVGckdlbFcyMVRnX2VuQTM2UFBTclNobmxvVG02enQ4M3hVWXpLUXZYbDU1YnJCczJ6YXRaMnZXd2Z0d01vT1dmcDZOYlVrZDhobGlack1HQThqX0E5UFRpal8xLTVCUVpTT1hTZmpjeGw3SnRad3F4NERKTjJka0kwZVQ2aFNBamM0WVVPTVFIRExSSkQ5dFk0Y2tZZnpKMzhtR2pzMm01d0FDdjJuMVFMb09McG9Wc3BmVDg2S3ktTjRnJ10iLAoiYWR2ZXJ0aXNlcl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAoiY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQiOiAiMCIsCiJsb2NhbGUiOiAiZW5fVVMiLAoiY2xpZW50X2NvdW50cnlfY29kZSI6ICJVUyIsCiJtZXRob2QiOiAiYXV0aC5sb2dpbiIsCiJmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUiOiAiYXV0aGVudGljYXRlIiwKImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiQXV0aE9wZXJhdGlvbnMkUGFzc3dvcmRBdXRoT3BlcmF0aW9uIiwKImFwaV9rZXkiOiAiODgyYTg0OTAzNjFkYTk4NzAyYmY5N2EwMjFkZGMxNGQifQogICAgICAgICAgICAgICAgY29udGVudF9sZW5naHQgPSAoIiYiKS5qb2luKFsgIiVzPSVzIiAlIChrZXksIHZhbHVlKSBmb3Iga2V5LCB2YWx1ZSBpbiBkYXRhLml0ZW1zKCkgXSkKICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7J1VzZXItQWdlbnQnOnVheHgsCidDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKJ3gtZmItQ29ubmVjdGlvbi1UeXBlJzogJ01PQklMRS5MVEUnLAonQWNjZXB0JzogJyovKicsCidIb3N0JzogJ2dyYXBoLmZhY2Vib29rLmNvbScsCidYLUZCLU5ldC1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpKSwKJ1gtRkItU0lNLUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyZTQsIDRlNCkpLAonWC1GYi1Db25uZWN0aW9uLUJhbmR3aWR0aCc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMDAwMCwgMzAwMDAwMDApKSwKJ1ByaW9yaXR5JyA6ICd1PTMsaScsCidaZXJvLVJhdGVkJzogJzAnLAonWC1GYi1Db25uZWN0aW9uLVF1YWxpdHknOiAnR09PRCcsCidYLUZCLUZyaWVuZGx5LU5hbWUnOiAnYXV0aGVudGljYXRlJywKJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6ICdncmFwaHNlcnZpY2UnLAonWC1UaWdvbi1Jcy1SZXRyeSc6ICdGYWxzZScsCid4LWZiLXNlc3Npb24taWQnOiAnbmlkPWppWit5Tk5CZ2J3QztwaWQ9TWFpbjt0aWQ9MTMyO25jPTE7ZmM9MDtiYz0wO2NpZD1kMjlkNjdkMzdlY2EzODc0ODJhOGE1Yjc0MGY4NGY2MicsCidYLUZiLURldmljZS1Hcm91cCc6ICc1MTIwJywKJ1gtRkItSFRUUC1FbmdpbmUnOiAnTGlnZXInLAonWC1GQi1DbGllbnQtSVAnOiAnVHJ1ZScsCidYLUZCLVNlcnZlci1DbHVzdGVyJzogJ1RydWUnLAoneC1mYi1jb25uZWN0aW9uLXRva2VuJzogJ2QyOWQ2N2QzN2VjYTM4NzQ4MmE4YTViNzQwZjg0ZjYyJywKJ0NvbnRlbnQtTGVuZ3RoJzogc3RyKGxlbihjb250ZW50X2xlbmdodCkpfQogICAgICAgICAgICAgICAgcSA9IHNlc3Npb24ucG9zdCgiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vYXV0aC9sb2dpbiIsZGF0YT1kYXRhLCBoZWFkZXJzPWhlYWRlcnMsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSkuanNvbigpCiAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHE6CiAgICAgICAgICAgICAgICAgICAgY2trayA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBxWyJzZXNzaW9uX2Nvb2tpZXMiXSk7TklYYiA9IGJhc2U2NC5iNjRlbmNvZGUob3MudXJhbmRvbSgxOCkpLmRlY29kZSgpLnJlcGxhY2UoIj0iLCIiKS5yZXBsYWNlKCIrIiwiXyIpLnJlcGxhY2UoIi8iLCItIik7Y29va2llID0gZiJzYj17TklYYn07e2Nra2t9IgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJ7Un0gXHgxYlszODs1OzE5Nm1bXDAzM1szODs1OzQ2bUJPU1Mt8J+Smlx4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZte3NpZH0gXHgxYlsxOzkybeKXj1x4MWJbMzg7NTs0Nm0ge3BzfSB7U31cbj0jPXtja2trfSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgRWxpdGUoc2lkLHBzLGNra2spCiAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChzaWQpICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0JPU1MvT0tfaWRzX00xLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKydcbicpO29wZW4oJy9zZGNhcmQvQk9TUy9DT09LaUVzX00xLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKyd8Jytjb29raWUrJ1xuJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXVsnbWVzc2FnZSddOgogICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyXHgxYlsxOzk2bSBbQk9TUy1DUF0ge3NpZH0g4pePIHtwc30ge1N9IikKICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChzaWQpCiAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvQk9TUy9NMS1DUC50eHQnLCdhJykud3JpdGUoc2lkKyd8JytwcysnXG4nKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBsb29wKz0xCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgICAgICBzZWxmLm1ldGhvZEEoc2lkLCBuYW1lLCBwcykKICAgICAgICAgI01FVEhPRDMgICAKICAgIGRlZiBtZXRob2RDKHNlbGYsIHNpZCwgbmFtZSwgcHN3KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGdsb2JhbCBva3MsY3BzLGxvb3AKICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXHJcMzNbMTs5Mm0gW1wzM1sxOzkybUJPU1MtWEQtTTNcMzNbMTs5Mm1dICVzIHwgXDAzM1sxOzkybU9LOi0lcyAgXDAzM1sxOzkybSclKGxvb3AsbGVuKG9rcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgIGFuZHJvaWRfdmVyc2lvbiA9IGYiQW5kcm9pZCB7cmFuZG9tLnJhbmRpbnQoNCwgMTApfS57cmFuZG9tLnJhbmRpbnQoMCwgOSl9LntyYW5kb20ucmFuZGludCgwLCA5KX0iCiAgICAgICAgICAgIGZhY2Vib29rX3ZlcnNpb24gPSBmJ3tyYW5kb20ucmFuZGludCgxMCw0MzIpfS4wLjAue3JhbmRvbS5yYW5kaW50KDExLDk5KX0ue3JhbmRvbS5yYW5kaW50KDEsMjAwKX0nCiAgICAgICAgICAgIGZiYnYgPSBzdHIocmFuZG9tLnJhbmRpbnQoMTAwMDAwMDAsIDk5OTk5OTk5KSkKICAgICAgICAgICAgZmJydiA9IHN0cihyYW5kb20ucmFuZGludCgxMDAwMDAwMCwgOTk5OTk5OTkpKQogICAgICAgICAgICBmYnN2ID0gZiJ7cmFuZG9tLnVuaWZvcm0oNC4wLCAxMC4wKTouMWZ9IgogICAgICAgICAgICBkZW5zaXR5ID0gcmFuZG9tLmNob2ljZShbIjIuMCIsIjIuMjUiLCIyLjc1IiwiMy4wIiwiMy4yNSIsIjMgNzUiXSkKICAgICAgICAgICAgd2lkdGggPSByYW5kb20ucmFuZGludCg3MjAsIDE0NDApCiAgICAgICAgICAgIGhlaWdodCA9IHJhbmRvbS5yYW5kaW50KDEwODAsIDI1NjApCiAgICAgICAgICAgIGZibGMgPSByYW5kb20uY2hvaWNlKFsiamFfSlAiLCJleF9NWCIsImVuX0NVIiwiZW5fVVMiLCJmcl9GUiIsImVzX0VTIiwicHRfQlIiLCJkZV9ERSIsIml0X0lUIiwiamFfSlAiLCJrb19LUiIsInJ1X1JVIiwiemhfQ04iLCJhcl9BRSIsImVuX0dCIl0pCiAgICAgICAgICAgIGZiY3IgPSByYW5kb20uY2hvaWNlKFsiVGVsZW5vciIsImZpZG8iLCJNT1ZPIEFGUklDQSIsIlVGT05FLVBBS1RlbCIsIlpvbmciLCJKYXp6IiwiU0NPIiwiSmlvIiwiVm9kYWZvbmUiLCJBaXJ0ZWwiLCJCU05MIiwiTVROTCIsIkdyYW1lZW5waG9uZSIsIlJvYmkiLCJCYW5nbGFsaW5rIiwiVGVsZXRhbGsiLCJUZWxrb21zZWwiLCJJbmRvc2F0IE9vcmVkb28iLCJBeGlhdGEiLCJUcmkiLCJTbWFydGZyZW4iLCJDaGluYSBNb2JpbGUiLCJVbmljb20iLCJUZWxlY29tIiwiU2F0Y29tIiwiRG9jb21vIiwiUmFrdXRlbiIsIklJSm1pbyIsIk9yYW5nZSIsIlZlcml6b24iLCJBVCZUIiwiVC1Nb2JpbGUiLCJTcHJpbnQiLCJWb2RhZm9uZSIsIlRlbGVmb25pY2EiLCJFRSIsIk9yYW5nZSIsIlRocmVlIl0pCiAgICAgICAgICAgIGZiYW4gPSByYW5kb20uY2hvaWNlKFsiRkI0QSIsICJGQjVBIiwgIkZCNkEiXSkKICAgICAgICAgICAgZmJwbiA9IHJhbmRvbS5jaG9pY2UoWyJjb20uZmFjZWJvb2sua2F0YW5hIiwgImNvbS5mYWNlYm9vay5vcmNhIiwibWVzc2VuZ2VyLWFuZHJvaWQiLCAiY29tLmZhY2Vib29rLmxpdGUiXSkKICAgICAgICAgICAgc29ueSA9IHJhbmRvbS5jaG9pY2UoWydTb255RXJpY3Nzb25TVDI1aXYnLCdTb255RXJpY3Nzb25TVDI1aScsJ1hwZXJpYSBVJ10pCiAgICAgICAgICAgICMjIyMjIyNtMyMjIyMKICAgICAgICAgICAgdWF4eCA9IGYnW0ZCQU4vRkI0QTtGQkFWLycrc3RyKHJhbmRvbS5yYW5kaW50KDExLDk5KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRpbnQoMTExMSw5OTk5KSkrJztGQkJWLycrc3RyKHJhbmRvbS5yYW5kaW50KDExMTExMTEsOTk5OTk5OSkpKyc7W0ZCQU4vT3JjYS1BbmRyb2lkO0ZCQVYvMTk2LjAuMC44OTtGQlBOL2NvbS5mYWNlYm9vay5vcmNhO0ZCTEMvZW5fQVU7RkJCVi80NTE2NDA3OTI7RkJDUi9DaGluYSBUZWxlY29tO0ZCTUYvT1BQTztGQkJEL09QUE87RkJEVi9DUEgyMTYxO0ZCU1YvMTIuNC4yO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtGQkRNL3tkZW5zaXR5PTEuMCx3aWR0aD0xMjgwLGhlaWdodD0xNDQwfTtGQl9GVy8xO0ZCUlYvOTc5Njg4MzY1O10nCiAgICAgICAgICAgICMjIyMjIwogICAgICAgICAgICBmcyA9IG5hbWUuc3BsaXQoJyAnKVswXQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBscyA9IG5hbWUuc3BsaXQoJyAnKVsxXQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBscyA9IGZzCiAgICAgICAgICAgIGZvciBwdyBpbiBwc3c6CiAgICAgICAgICAgICAgICBwcyA9IHB3LnJlcGxhY2UoJ2ZpcnN0Jyxmcy5sb3dlcigpKS5yZXBsYWNlKCdGaXJzdCcsZnMpLnJlcGxhY2UoJ2xhc3QnLGxzLmxvd2VyKCkpLnJlcGxhY2UoJ0xhc3QnLGxzKS5yZXBsYWNlKCdOYW1lJyxuYW1lKS5yZXBsYWNlKCduYW1lJyxuYW1lLmxvd2VyKCkpICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgc2Vzc2lvbjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBkYXRhID0geyJhZGlkIjogc3RyKHV1aWQudXVpZDQoKSksCiJmb3JtYXQiOiAianNvbiIsCiJkZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKImNwbCI6ICJ0cnVlIiwKImZhbWlseV9kZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKInNlY3VyZV9mYW1pbHlfZGV2aWNlX2lkIjogc3RyKHV1aWQudXVpZDQoKSksCiJjcmVkZW50aWFsc190eXBlIjogImRldmljZV9iYXNlZF9sb2dpbl9wYXNzd29yZCIsCiJlcnJvcl9kZXRhaWxfdHlwZSI6ICJidXR0b25fd2l0aF9kaXNhYmxlZCIsCiJzb3VyY2UiOiAiYWNjb3VudF9yZWNvdmVyeSIsCidzaW1fc2VyaWFscyc6ICJbJzgwOTczNDUzMzQ1MjEwNzg0Nzk4J10iLAonb3BlbmlkX2Zsb3cnOiAnYW5kcm9pZF9sb2dpbicsCidvcGVuaWRfcHJvdmlkZXInOiAnZ29vZ2xlJywKImVtYWlsIjogc2lkLAoicGFzc3dvcmQiOiBwcywKImFjY2Vzc190b2tlbiI6ICIzNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzIiLAoiZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzIjogIjEiLAoibWV0YV9pbmZfZmJtZXRhIjogIlYyX1VOVEFHR0VEIiwKJ29wZW5pZF90b2tlbnMnOiAiWydleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpkak9XTTNPR1V6WWpBd1pURmlZakE1TW1ReU5EWmpPRGczWWpFeE1qSXdZemczWWpka01qQWlMQ0owZVhBaU9pSktWMVFpZlEuZXlKcGMzTWlPaUFpWVdOamIzVnVkSE11WjI5dloyeGxMbU52YlNJc0lDSmhlbkFpT2lBaU1UWTVNakk1TXpneU15MHhabm8wY0dWak9HZzVOMkpzWW14bWQydDBPRGgyTkc4d2VXSjVZMnBzZVdZdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDQWlZWFZrSWpvZ0lqRTJPVEl5T1RNNE1qTXRiRGhxWkRBNU9HaDVZM2RtZDJsblpEWTBOVzV4TW1kbWVYVjBZVEZ1WjJGb0xtRndjSE11WjI5dloyeGxkWE5sY21OdmJuUmxiblF1WTI5dElpd2dJbk4xWWlJNklDSXhNRGt4TXprNE56TXpORE13TlRjd01ERTVOemtpTENBaVpXMWhhV3dpT2lBaU1UazBOVUJuYldGcGJDNWpiMjBpTENBaVpXMWhhV3hmZG1WeWFXWnBaV1FpT2lCMGNuVmxMQ0FpY0dsamRIVnlaU0k2SUNKb2RIUndjem92TDJ4b015NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjB2WVMwdlFVUmZZMDFOVW10RlkzRkRjVGx3Y0Y5WU1IZElZVGxTYjNKcFIyVjFhMHRKYTBObkxVMTVUakZpUjJneGIzbG5YMUU5Y3prMkxXTWlMQ0FpYVdGMElqb2dNVFk1TWpJNU16Z3lNeXdnSW1WNGNDSTZJREUyT1RJeU9UTTRNak45Lm9IdmFrQ3hwbVZkQXpZZ3E1alNYTjV1Q0Q2TDEwQmoyRWhibFdLNElFRmhhdF9hY242akRQS0djWVZEeDh3eG9qNXJGUlZiRFAxeHd6Zk4wZUNGRzZSOXBUc2xzUUhQLVByVE5zcWVWbmhXRFYxaUV1cDc3aVJoUGpKUkNsTk1pajVSenFRRnI3clN0d1B0QW9sclFXQ19xX3V1RnJHZWxXMjFUZ19lbkEzNlBQU3JTaG5sb1RtNnp0ODN4VVl6S1F2WGw1NWJyQnMyemF0WjJ2V3dmdHdNb09XZnA2TmJVa2Q4aGxpWnJNR0E4al9BOVBUaWpfMS01QlFaU09YU2ZqY3hsN0p0WndxeDRESk4yZGtJMGVUNmhTQWpjNFlVT01RSERMUkpEOXRZNGNrWWZ6SjM4bUdqczJtNXdBQ3YybjFRTG9PTHBvVnNwZlQ4Nkt5LU40ZyddIiwKImFkdmVydGlzZXJfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKImN1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkIjogIjAiLAoibG9jYWxlIjogImVuX1VTIiwKImNsaWVudF9jb3VudHJ5X2NvZGUiOiAiVVMiLAoibWV0aG9kIjogImF1dGgubG9naW4iLAoiZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lIjogImF1dGhlbnRpY2F0ZSIsCiJmYl9hcGlfY2FsbGVyX2NsYXNzIjogIkF1dGhPcGVyYXRpb25zJFBhc3N3b3JkQXV0aE9wZXJhdGlvbiIsCiJhcGlfa2V5IjogIjg4MmE4NDkwMzYxZGE5ODcwMmJmOTdhMDIxZGRjMTRkIn0KICAgICAgICAgICAgICAgIGNvbnRlbnRfbGVuZ2h0ID0gKCImIikuam9pbihbICIlcz0lcyIgJSAoa2V5LCB2YWx1ZSkgZm9yIGtleSwgdmFsdWUgaW4gZGF0YS5pdGVtcygpIF0pCiAgICAgICAgICAgICAgICBoZWFkZXJzID0geydVc2VyLUFnZW50Jzp1YXh4LAonQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCid4LWZiLUNvbm5lY3Rpb24tVHlwZSc6ICdNT0JJTEUuTFRFJywKJ0FjY2VwdCc6ICcqLyonLAonSG9zdCc6ICdncmFwaC5mYWNlYm9vay5jb20nLAonWC1GQi1OZXQtSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDJlNCwgNGU0KSksCidYLUZCLVNJTS1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpKSwKJ1gtRmItQ29ubmVjdGlvbi1CYW5kd2lkdGgnOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAwMDAsIDMwMDAwMDAwKSksCidQcmlvcml0eScgOiAndT0zLGknLAonWmVyby1SYXRlZCc6ICcwJywKJ1gtRmItQ29ubmVjdGlvbi1RdWFsaXR5JzogJ0dPT0QnLAonWC1GQi1GcmllbmRseS1OYW1lJzogJ2F1dGhlbnRpY2F0ZScsCidYLUZCLVJlcXVlc3QtQW5hbHl0aWNzLVRhZ3MnOiAnZ3JhcGhzZXJ2aWNlJywKJ1gtRmItRGV2aWNlLUdyb3VwJzogJzUxMjAnLAonWC1GQi1IVFRQLUVuZ2luZSc6ICdMaWdlcicsCidYLUZCLUNsaWVudC1JUCc6ICdUcnVlJywKJ1gtRkItU2VydmVyLUNsdXN0ZXInOiAnVHJ1ZScsCidDb250ZW50LUxlbmd0aCc6IHN0cihsZW4oY29udGVudF9sZW5naHQpKX0KICAgICAgICAgICAgICAgIHEgPSBzZXNzaW9uLnBvc3QoImh0dHBzOi8vYXBpLmZhY2Vib29rLmNvbS9hdXRoL2xvZ2luIixkYXRhPWRhdGEsIGhlYWRlcnM9aGVhZGVycywgYWxsb3dfcmVkaXJlY3RzPUZhbHNlKS5qc29uKCkKICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToKICAgICAgICAgICAgICAgICAgICBja2trID0gIjsiLmpvaW4oaVsibmFtZSJdKyI9IitpWyJ2YWx1ZSJdIGZvciBpIGluIHFbInNlc3Npb25fY29va2llcyJdKTtOSVhiID0gYmFzZTY0LmI2NGVuY29kZShvcy51cmFuZG9tKDE4KSkuZGVjb2RlKCkucmVwbGFjZSgiPSIsIiIpLnJlcGxhY2UoIisiLCJfIikucmVwbGFjZSgiLyIsIi0iKTtjb29raWUgPSBmInNiPXtOSVhifTt7Y2tra30iCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJccntSfSBceDFiWzM4OzU7MTk2bVtcMDMzWzM4OzU7NDZtQk9TUy3wn5KaXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm17c2lkfSBceDFiWzE7OTJt4pePXHgxYlszODs1OzQ2bSB7cHN9IHtTfVxuPSM9e2Nra2t9IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBFbGl0ZShzaWQscHMsY2traykKICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHNpZCkKICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0JPU1MvT0tfaWRzX00zLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKydcbicpO29wZW4oJy9zZGNhcmQvQk9TUy9DT09LaUVzX00zLnR4dCcsJ2EnKS53cml0ZShzaWQrJ3wnK3BzKyd8Jytjb29raWUrJ1xuJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXVsnbWVzc2FnZSddOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJceDFiWzE7OTZtIFtCT1NTLUNQXSB7c2lkfSDil48ge3BzfSB7U30iKQogICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoc2lkKQogICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvQk9TUy9NMy1DUC50eHQnLCdhJykud3JpdGUoc2lkKyd8JytwcysnXG4nKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBsb29wKz0xCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgICAgICBzZWxmLm1ldGhvZEMoc2lkLCBuYW1lLCBwcykKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgCiAgICBkZWYgbWV0aG9kQihzZWxmLCBzaWQsIG5hbWUsIHBzdyk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBnbG9iYWwgb2tzLGNwcyxsb29wCiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcclxyXDMzWzE7OTJtIFtcMzNbMTs5Mm1CT1NTLVhELU0yXDMzWzE7OTJtXSAlcyB8IFwwMzNbMTs5Mm1PSzotJXMgIFwwMzNbMTs5Mm0nJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgICAgICBhbmRyb2lkX3ZlcnNpb24gPSBmIkFuZHJvaWQge3JhbmRvbS5yYW5kaW50KDQsIDEwKX0ue3JhbmRvbS5yYW5kaW50KDAsIDkpfS57cmFuZG9tLnJhbmRpbnQoMCwgOSl9IgogICAgICAgICAgICBmYWNlYm9va192ZXJzaW9uID0gZid7cmFuZG9tLnJhbmRpbnQoMTAsNDMyKX0uMC4wLntyYW5kb20ucmFuZGludCgxMSw5OSl9LntyYW5kb20ucmFuZGludCgxLDIwMCl9JwogICAgICAgICAgICBmYmJ2ID0gc3RyKHJhbmRvbS5yYW5kaW50KDEwMDAwMDAwLCA5OTk5OTk5OSkpCiAgICAgICAgICAgIGZicnYgPSBzdHIocmFuZG9tLnJhbmRpbnQoMTAwMDAwMDAsIDk5OTk5OTk5KSkKICAgICAgICAgICAgZmJzdiA9IGYie3JhbmRvbS51bmlmb3JtKDQuMCwgMTAuMCk6LjFmfSIKICAgICAgICAgICAgZGVuc2l0eSA9IHJhbmRvbS5jaG9pY2UoWyIyLjAiLCIyLjI1IiwiMi43NSIsIjMuMCIsIjMuMjUiLCIzLjc1Il0pCiAgICAgICAgICAgIHdpZHRoID0gcmFuZG9tLnJhbmRpbnQoNzIwLCAxNDQwKQogICAgICAgICAgICBoZWlnaHQgPSByYW5kb20ucmFuZGludCgxMDgwLCAyNTYwKQogICAgICAgICAgICBmYmxjID0gcmFuZG9tLmNob2ljZShbImphX0pQIiwiZXhfTVgiLCJlbl9DVSIsImVuX1VTIiwiZnJfRlIiLCJlc19FUyIsInB0X0JSIiwiZGVfREUiLCJpdF9JVCIsImphX0pQIiwia29fS1IiLCJydV9SVSIsInpoX0NOIiwiYXJfQUUiLCJlbl9HQiJdKQogICAgICAgICAgICBmYmNyID0gcmFuZG9tLmNob2ljZShbIlRlbGVub3IiLCJmaWRvIiwiTU9WTyBBRlJJQ0EiLCJVRk9ORS1QQUtUZWwiLCJab25nIiwiSmF6eiIsIlNDTyIsIkppbyIsIlZvZGFmb25lIiwiQWlydGVsIiwiQlNOTCIsIk1UTkwiLCJHcmFtZWVucGhvbmUiLCJSb2JpIiwiQmFuZ2xhbGluayIsIlRlbGV0YWxrIiwiVGVsa29tc2VsIiwiSW5kb3NhdCBPb3JlZG9vIiwiQXhpYXRhIiwiVHJpIiwiU21hcnRmcmVuIiwiQ2hpbmEgTW9iaWxlIiwiVW5pY29tIiwiVGVsZWNvbSIsIlNhdGNvbSIsIkRvY29tbyIsIlJha3V0ZW4iLCJJSUptaW8iLCJPcmFuZ2UiLCJWZXJpem9uIiwiQVQmVCIsIlQtTW9iaWxlIiwiU3ByaW50IiwiVm9kYWZvbmUiLCJUZWxlZm9uaWNhIiwiRUUiLCJPcmFuZ2UiLCJUaHJlZSJdKQogICAgICAgICAgICBmYmFuID0gcmFuZG9tLmNob2ljZShbIkZCNEEiLCAiRkI1QSIsICJGQjZBIl0pCiAgICAgICAgICAgIGZicG4gPSByYW5kb20uY2hvaWNlKFsiY29tLmZhY2Vib29rLmthdGFuYSIsICJjb20uZmFjZWJvb2sub3JjYSIsIm1lc3Nlbmdlci1hbmRyb2lkIiwgImNvbS5mYWNlYm9vay5saXRlIl0pCiAgICAgICAgICAgIHNvbnkgPSByYW5kb20uY2hvaWNlKFsnU29ueUVyaWNzc29uU1QyNWl2JywnU29ueUVyaWNzc29uU1QyNWknLCdYcGVyaWEgVSddKQogICAgICAgICAgICAjIyMjbTIjIyMjIyMKICAgICAgICAgICAgdWF4eCA9IGYnW0ZCQU4vRkI0QTtGQkFWLycrc3RyKHJhbmRvbS5yYW5kaW50KDExLDk5KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRpbnQoMTExMSw5OTk5KSkrJztGQkJWLycrc3RyKHJhbmRvbS5yYW5kaW50KDExMTExMTEsOTk5OTk5OSkpKyc7W0ZCQU4vT3JjYS1BbmRyb2lkO0ZCQVYvMTk2LjAuMC4xNTtGQlBOL2NvbS5mYWNlYm9vay5vcmNhO0ZCTEMvZGVfREU7RkJCVi8yMjgyMDcwMTM7RkJDUi9MeWNhbW9iaWxlO0ZCTUYvT1BQTztGQkJEL09QUE87RkJEVi9DUEgyMzg3O0ZCU1YvMTMuMC4xO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtGQkRNL3tkZW5zaXR5PTMuMCx3aWR0aD0xMDgwLGhlaWdodD0xMDgwfTtGQl9GVy8xO0ZCUlYvNTE3NTA0NDYyO10nCiAgICAgICAgICAgIGZzID0gbmFtZS5zcGxpdCgnICcpWzBdCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGxzID0gbmFtZS5zcGxpdCgnICcpWzFdCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIGxzID0gZnMKICAgICAgICAgICAgZm9yIHB3IGluIHBzdzoKICAgICAgICAgICAgICAgIHBzID0gcHcucmVwbGFjZSgnZmlyc3QnLGZzLmxvd2VyKCkpLnJlcGxhY2UoJ0ZpcnN0JyxmcykucmVwbGFjZSgnbGFzdCcsbHMubG93ZXIoKSkucmVwbGFjZSgnTGFzdCcsbHMpLnJlcGxhY2UoJ05hbWUnLG5hbWUpLnJlcGxhY2UoJ25hbWUnLG5hbWUubG93ZXIoKSkgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB3aXRoIHJlcXVlc3RzLlNlc3Npb24oKSBhcyBzZXNzaW9uOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7ImFkaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKImZvcm1hdCI6ICJqc29uIiwKImRldmljZV9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAoiY3BsIjogInRydWUiLAoiZmFtaWx5X2RldmljZV9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAoic2VjdXJlX2ZhbWlseV9kZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKImNyZWRlbnRpYWxzX3R5cGUiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkIiwKImVycm9yX2RldGFpbF90eXBlIjogImJ1dHRvbl93aXRoX2Rpc2FibGVkIiwKInNvdXJjZSI6ICJhY2NvdW50X3JlY292ZXJ5IiwKJ3NpbV9zZXJpYWxzJzogIlsnODA5NzM0NTMzNDUyMTA3ODQ3OTgnXSIsCidvcGVuaWRfZmxvdyc6ICdhbmRyb2lkX2xvZ2luJywKJ29wZW5pZF9wcm92aWRlcic6ICdnb29nbGUnLAoiZW1haWwiOiBzaWQsCiJwYXNzd29yZCI6IHBzLAoiYWNjZXNzX3Rva2VuIjogIjM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMiIsCiJnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMiOiAiMSIsCiJtZXRhX2luZl9mYm1ldGEiOiAiVjJfVU5UQUdHRUQiLAonb3BlbmlkX3Rva2Vucyc6ICJbJ2V5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJamRqT1dNM09HVXpZakF3WlRGaVlqQTVNbVF5TkRaak9EZzNZakV4TWpJd1l6ZzNZamRrTWpBaUxDSjBlWEFpT2lKS1YxUWlmUS5leUpwYzNNaU9pQWlZV05qYjNWdWRITXVaMjl2WjJ4bExtTnZiU0lzSUNKaGVuQWlPaUFpTVRZNU1qSTVNemd5TXkweFpubzBjR1ZqT0dnNU4ySnNZbXhtZDJ0ME9EaDJORzh3ZVdKNVkycHNlV1l1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENBaVlYVmtJam9nSWpFMk9USXlPVE00TWpNdGJEaHFaREE1T0doNVkzZG1kMmxuWkRZME5XNXhNbWRtZVhWMFlURnVaMkZvTG1Gd2NITXVaMjl2WjJ4bGRYTmxjbU52Ym5SbGJuUXVZMjl0SWl3Z0luTjFZaUk2SUNJeE1Ea3hNems0TnpNek5ETXdOVGN3TURFNU56a2lMQ0FpWlcxaGFXd2lPaUFpTVRrME5VQm5iV0ZwYkM1amIyMGlMQ0FpWlcxaGFXeGZkbVZ5YVdacFpXUWlPaUIwY25WbExDQWljR2xqZEhWeVpTSTZJQ0pvZEhSd2N6b3ZMMnhvTXk1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMHZZUzB2UVVSZlkwMU5VbXRGWTNGRGNUbHdjRjlZTUhkSVlUbFNiM0pwUjJWMWEwdEphME5uTFUxNVRqRmlSMmd4YjNsblgxRTljemsyTFdNaUxDQWlhV0YwSWpvZ01UWTVNakk1TXpneU15d2dJbVY0Y0NJNklERTJPVEl5T1RNNE1qTjkub0h2YWtDeHBtVmRBellncTVqU1hONXVDRDZMMTBCajJFaGJsV0s0SUVGaGF0X2FjbjZqRFBLR2NZVkR4OHd4b2o1ckZSVmJEUDF4d3pmTjBlQ0ZHNlI5cFRzbHNRSFAtUHJUTnNxZVZuaFdEVjFpRXVwNzdpUmhQakpSQ2xOTWlqNVJ6cVFGcjdyU3R3UHRBb2xyUVdDX3FfdXVGckdlbFcyMVRnX2VuQTM2UFBTclNobmxvVG02enQ4M3hVWXpLUXZYbDU1YnJCczJ6YXRaMnZXd2Z0d01vT1dmcDZOYlVrZDhobGlack1HQThqX0E5UFRpal8xLTVCUVpTT1hTZmpjeGw3SnRad3F4NERKTjJka0kwZVQ2aFNBamM0WVVPTVFIRExSSkQ5dFk0Y2tZZnpKMzhtR2pzMm01d0FDdjJuMVFMb09McG9Wc3BmVDg2S3ktTjRnJ10iLAoiYWR2ZXJ0aXNlcl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAoiY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQiOiAiMCIsCiJsb2NhbGUiOiAiZW5fVVMiLAoiY2xpZW50X2NvdW50cnlfY29kZSI6ICJVUyIsCiJtZXRob2QiOiAiYXV0aC5sb2dpbiIsCiJmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUiOiAiYXV0aGVudGljYXRlIiwKImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiQXV0aE9wZXJhdGlvbnMkUGFzc3dvcmRBdXRoT3BlcmF0aW9uIiwKImFwaV9rZXkiOiAiODgyYTg0OTAzNjFkYTk4NzAyYmY5N2EwMjFkZGMxNGQifQogICAgICAgICAgICAgICAgY29udGVudF9sZW5naHQgPSAoIiYiKS5qb2luKFsgIiVzPSVzIiAlIChrZXksIHZhbHVlKSBmb3Iga2V5LCB2YWx1ZSBpbiBkYXRhLml0ZW1zKCkgXSkKICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7J1VzZXItQWdlbnQnOnVheHgsCidDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKJ3gtZmItQ29ubmVjdGlvbi1UeXBlJzogJ01PQklMRS5MVEUnLAonQWNjZXB0JzogJyovKicsCidIb3N0JzogJ2dyYXBoLmZhY2Vib29rLmNvbScsCidYLUZCLU5ldC1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpKSwKJ1gtRkItU0lNLUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyZTQsIDRlNCkpLAonWC1GYi1Db25uZWN0aW9uLUJhbmR3aWR0aCc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMDAwMCwgMzAwMDAwMDApKSwKJ1ByaW9yaXR5JyA6ICd1PTMsaScsCidaZXJvLVJhdGVkJzogJzAnLAonWC1GYi1Db25uZWN0aW9uLVF1YWxpdHknOiAnR09PRCcsCidYLUZCLUZyaWVuZGx5LU5hbWUnOiAnYXV0aGVudGljYXRlJywKJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6ICdncmFwaHNlcnZpY2UnLAonWC1GYi1EZXZpY2UtR3JvdXAnOiAnNTEyMCcsCidYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJywKJ1gtRkItQ2xpZW50LUlQJzogJ1RydWUnLAonWC1GQi1TZXJ2ZXItQ2x1c3Rlcic6ICdUcnVlJywKJ0NvbnRlbnQtTGVuZ3RoJzogc3RyKGxlbihjb250ZW50X2xlbmdodCkpfQogICAgICAgICAgICAgICAgcSA9IHNlc3Npb24ucG9zdCgiaHR0cHM6Ly9iLWdyYXBoLmZhY2Vib29rLmNvbS9hdXRoL2xvZ2luIixkYXRhPWRhdGEsIGhlYWRlcnM9aGVhZGVycywgYWxsb3dfcmVkaXJlY3RzPUZhbHNlKS5qc29uKCkKICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToKICAgICAgICAgICAgICAgICAgICBja2trID0gIjsiLmpvaW4oaVsibmFtZSJdKyI9IitpWyJ2YWx1ZSJdIGZvciBpIGluIHFbInNlc3Npb25fY29va2llcyJdKTtOSVhiID0gYmFzZTY0LmI2NGVuY29kZShvcy51cmFuZG9tKDE4KSkuZGVjb2RlKCkucmVwbGFjZSgiPSIsIiIpLnJlcGxhY2UoIisiLCJfIikucmVwbGFjZSgiLyIsIi0iKTtjb29raWUgPSBmInNiPXtCT1NTYn07e2Nra2t9IgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJ7Un0gXHgxYlszODs1OzE5Nm1bXDAzM1szODs1OzQ2bUJPU1Mt8J+Smlx4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZte3NpZH0gXHgxYlsxOzkybeKXj1x4MWJbMzg7NTs0Nm0ge3BzfSB7U31cbj0jPXtja2trfSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgRWxpdGUoc2lkLHBzLGNra2spCiAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChzaWQpCiAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC8vQk9TUy9PS19pZHNfTTIudHh0JywnYScpLndyaXRlKHNpZCsnfCcrcHMrJ1xuJyk7b3BlbignL3NkY2FyZC9CT1NTL0NPT0tpRXNfTTIudHh0JywnYScpLndyaXRlKHNpZCsnfCcrcHMrJ3wnK2Nvb2tpZSsnXG4nKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvciddWydtZXNzYWdlJ106CiAgICAgICAgICAgICAgICAgICAgI3ByaW50KGYiXHJceDFiWzE7OTZtIFtCT1NTLUNQXSB7c2lkfSDil48ge3BzfSB7U30iKQogICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoc2lkKQogICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvQk9TUy9NMi1DUC50eHQnLCdhJykud3JpdGUoc2lkKyd8JytwcysnXG4nKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBsb29wKz0xCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgICAgICBzZWxmLm1ldGhvZEIoc2lkLCBuYW1lLCBwcykKCiAgICBkZWYgbWV0aG9kRChzZWxmLCBzaWQsIG5hbWUsIHBzdyk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBnbG9iYWwgb2tzLGNwcyxsb29wCiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcclxyXDMzWzE7OTJtIFtcMzNbMTs5Mm1CT1NTLVhELU00XDMzWzE7OTJtXSAlcyB8IFwwMzNbMTs5Mm1PSzotJXMgIFwwMzNbMTs5Mm0nJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgICAgICBhbmRyb2lkX3ZlcnNpb24gPSBmIkFuZHJvaWQge3JhbmRvbS5yYW5kaW50KDQsIDEwKX0ue3JhbmRvbS5yYW5kaW50KDAsIDkpfS57cmFuZG9tLnJhbmRpbnQoMCwgOSl9IgogICAgICAgICAgICBmYWNlYm9va192ZXJzaW9uID0gZid7cmFuZG9tLnJhbmRpbnQoMTAsNDMyKX0uMC4wLntyYW5kb20ucmFuZGludCgxMSw5OSl9LntyYW5kb20ucmFuZGludCgxLDIwMCl9JwogICAgICAgICAgICBmYmJ2ID0gc3RyKHJhbmRvbS5yYW5kaW50KDEwMDAwMDAwLCA5OTk5OTk5OSkpCiAgICAgICAgICAgIGZicnYgPSBzdHIocmFuZG9tLnJhbmRpbnQoMTAwMDAwMDAsIDk5OTk5OTk5KSkKICAgICAgICAgICAgZmJzdiA9IGYie3JhbmRvbS51bmlmb3JtKDQuMCwgMTAuMCk6LjFmfSIKICAgICAgICAgICAgZGVuc2l0eSA9IHJhbmRvbS5jaG9pY2UoWyIyLjAiLCIyLjI1IiwiMi43NSIsIjMuMCIsIjMuMjUiLCIzIDc1Il0pCiAgICAgICAgICAgIHdpZHRoID0gcmFuZG9tLnJhbmRpbnQoNzIwLCAxNDQwKQogICAgICAgICAgICBoZWlnaHQgPSByYW5kb20ucmFuZGludCgxMDgwLCAyNTYwKQogICAgICAgICAgICBmYmxjID0gcmFuZG9tLmNob2ljZShbImphX0pQIiwiZXhfTVgiLCJlbl9DVSIsImVuX1VTIiwiZnJfRlIiLCJlc19FUyIsInB0X0JSIiwiZGVfREUiLCJpdF9JVCIsImphX0pQIiwia29fS1IiLCJydV9SVSIsInpoX0NOIiwiYXJfQUUiLCJlbl9HQiJdKQogICAgICAgICAgICBmYmNyID0gcmFuZG9tLmNob2ljZShbIlRlbGVub3IiLCJmaWRvIiwiTU9WTyBBRlJJQ0EiLCJVRk9ORS1QQUtUZWwiLCJab25nIiwiSmF6eiIsIlNDTyIsIkppbyIsIlZvZGFmb25lIiwiQWlydGVsIiwiQlNOTCIsIk1UTkwiLCJHcmFtZWVucGhvbmUiLCJSb2JpIiwiQmFuZ2xhbGluayIsIlRlbGV0YWxrIiwiVGVsa29tc2VsIiwiSW5kb3NhdCBPb3JlZG9vIiwiQXhpYXRhIiwiVHJpIiwiU21hcnRmcmVuIiwiQ2hpbmEgTW9iaWxlIiwiVW5pY29tIiwiVGVsZWNvbSIsIlNhdGNvbSIsIkRvY29tbyIsIlJha3V0ZW4iLCJJSUptaW8iLCJPcmFuZ2UiLCJWZXJpem9uIiwiQVQmVCIsIlQtTW9iaWxlIiwiU3ByaW50IiwiVm9kYWZvbmUiLCJUZWxlZm9uaWNhIiwiRUUiLCJPcmFuZ2UiLCJUaHJlZSJdKQogICAgICAgICAgICBmYmFuID0gcmFuZG9tLmNob2ljZShbIkZCNEEiLCAiRkI1QSIsICJGQjZBIl0pCiAgICAgICAgICAgIGZicG4gPSByYW5kb20uY2hvaWNlKFsiY29tLmZhY2Vib29rLmthdGFuYSIsICJjb20uZmFjZWJvb2sub3JjYSIsIm1lc3Nlbmdlci1hbmRyb2lkIiwgImNvbS5mYWNlYm9vay5saXRlIl0pCiAgICAgICAgICAgIHNvbnkgPSByYW5kb20uY2hvaWNlKFsnU29ueUVyaWNzc29uU1QyNWl2JywnU29ueUVyaWNzc29uU1QyNWknLCdYcGVyaWEgVSddKQogICAgICAgICAgICAjIyMjI200IyMjIyMKICAgICAgICAgICAgdWF4eCA9IGYnW0ZCQU4vRkI0QTtGQkFWLycrc3RyKHJhbmRvbS5yYW5kaW50KDExLDk5KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRpbnQoMTExMSw5OTk5KSkrJztGQkJWLycrc3RyKHJhbmRvbS5yYW5kaW50KDExMTExMTEsOTk5OTk5OSkpKyc7W0ZCQU4vT3JjYS1BbmRyb2lkO0ZCQVYvMTk2LjAuMC4xNTtGQlBOL2NvbS5mYWNlYm9vay5vcmNhO0ZCTEMvZGVfREU7RkJCVi8yMjgyMDcwMTM7RkJDUi9MeWNhbW9iaWxlO0ZCTUYvT1BQTztGQkJEL09QUE87RkJEVi9DUEgyMzg3O0ZCU1YvMTMuMC4xO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtGQkRNL3tkZW5zaXR5PTMuMCx3aWR0aD0xMDgwLGhlaWdodD0xMDgwfTtGQl9GVy8xO0ZCUlYvNTE3NTA0NDYyO10nCiAgICAgICAgICAgIGZzID0gbmFtZS5zcGxpdCgnICcpWzBdCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGxzID0gbmFtZS5zcGxpdCgnICcpWzFdCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIGxzID0gZnMKICAgICAgICAgICAgZm9yIHB3IGluIHBzdzoKICAgICAgICAgICAgICAgIHBzID0gcHcucmVwbGFjZSgnZmlyc3QnLGZzLmxvd2VyKCkpLnJlcGxhY2UoJ0ZpcnN0JyxmcykucmVwbGFjZSgnbGFzdCcsbHMubG93ZXIoKSkucmVwbGFjZSgnTGFzdCcsbHMpLnJlcGxhY2UoJ05hbWUnLG5hbWUpLnJlcGxhY2UoJ25hbWUnLG5hbWUubG93ZXIoKSkgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB3aXRoIHJlcXVlc3RzLlNlc3Npb24oKSBhcyBzZXNzaW9uOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7ImFkaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKImZvcm1hdCI6ICJqc29uIiwKImRldmljZV9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAoiY3BsIjogInRydWUiLAoiZmFtaWx5X2RldmljZV9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAoic2VjdXJlX2ZhbWlseV9kZXZpY2VfaWQiOiBzdHIodXVpZC51dWlkNCgpKSwKImNyZWRlbnRpYWxzX3R5cGUiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkIiwKImVycm9yX2RldGFpbF90eXBlIjogImJ1dHRvbl93aXRoX2Rpc2FibGVkIiwKInNvdXJjZSI6ICJhY2NvdW50X3JlY292ZXJ5IiwKJ3NpbV9zZXJpYWxzJzogIlsnODA5NzM0NTMzNDUyMTA3ODQ3OTgnXSIsCidvcGVuaWRfZmxvdyc6ICdhbmRyb2lkX2xvZ2luJywKJ29wZW5pZF9wcm92aWRlcic6ICdnb29nbGUnLAoiZW1haWwiOiBzaWQsCiJwYXNzd29yZCI6IHBzLAoiYWNjZXNzX3Rva2VuIjogIjM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMiIsCiJnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMiOiAiMSIsCiJtZXRhX2luZl9mYm1ldGEiOiAiVjJfVU5UQUdHRUQiLAonb3BlbmlkX3Rva2Vucyc6ICJbJ2V5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJamRqT1dNM09HVXpZakF3WlRGaVlqQTVNbVF5TkRaak9EZzNZakV4TWpJd1l6ZzNZamRrTWpBaUxDSjBlWEFpT2lKS1YxUWlmUS5leUpwYzNNaU9pQWlZV05qYjNWdWRITXVaMjl2WjJ4bExtTnZiU0lzSUNKaGVuQWlPaUFpTVRZNU1qSTVNemd5TXkweFpubzBjR1ZqT0dnNU4ySnNZbXhtZDJ0ME9EaDJORzh3ZVdKNVkycHNlV1l1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENBaVlYVmtJam9nSWpFMk9USXlPVE00TWpNdGJEaHFaREE1T0doNVkzZG1kMmxuWkRZME5XNXhNbWRtZVhWMFlURnVaMkZvTG1Gd2NITXVaMjl2WjJ4bGRYTmxjbU52Ym5SbGJuUXVZMjl0SWl3Z0luTjFZaUk2SUNJeE1Ea3hNems0TnpNek5ETXdOVGN3TURFNU56a2lMQ0FpWlcxaGFXd2lPaUFpTVRrME5VQm5iV0ZwYkM1amIyMGlMQ0FpWlcxaGFXeGZkbVZ5YVdacFpXUWlPaUIwY25WbExDQWljR2xqZEhWeVpTSTZJQ0pvZEhSd2N6b3ZMMnhvTXk1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMHZZUzB2UVVSZlkwMU5VbXRGWTNGRGNUbHdjRjlZTUhkSVlUbFNiM0pwUjJWMWEwdEphME5uTFUxNVRqRmlSMmd4YjNsblgxRTljemsyTFdNaUxDQWlhV0YwSWpvZ01UWTVNakk1TXpneU15d2dJbVY0Y0NJNklERTJPVEl5T1RNNE1qTjkub0h2YWtDeHBtVmRBellncTVqU1hONXVDRDZMMTBCajJFaGJsV0s0SUVGaGF0X2FjbjZqRFBLR2NZVkR4OHd4b2o1ckZSVmJEUDF4d3pmTjBlQ0ZHNlI5cFRzbHNRSFAtUHJUTnNxZVZuaFdEVjFpRXVwNzdpUmhQakpSQ2xOTWlqNVJ6cVFGcjdyU3R3UHRBb2xyUVdDX3FfdXVGckdlbFcyMVRnX2VuQTM2UFBTclNobmxvVG02enQ4M3hVWXpLUXZYbDU1YnJCczJ6YXRaMnZXd2Z0d01vT1dmcDZOYlVrZDhobGlack1HQThqX0E5UFRpal8xLTVCUVpTT1hTZmpjeGw3SnRad3F4NERKTjJka0kwZVQ2aFNBamM0WVVPTVFIRExSSkQ5dFk0Y2tZZnpKMzhtR2pzMm01d0FDdjJuMVFMb09McG9Wc3BmVDg2S3ktTjRnJ10iLAoiYWR2ZXJ0aXNlcl9pZCI6IHN0cih1dWlkLnV1aWQ0KCkpLAoiY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQiOiAiMCIsCiJsb2NhbGUiOiAiZW5fVVMiLAoiY2xpZW50X2NvdW50cnlfY29kZSI6ICJVUyIsCiJtZXRob2QiOiAiYXV0aC5sb2dpbiIsCiJmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUiOiAiYXV0aGVudGljYXRlIiwKImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiQXV0aE9wZXJhdGlvbnMkUGFzc3dvcmRBdXRoT3BlcmF0aW9uIiwKImFwaV9rZXkiOiAiODgyYTg0OTAzNjFkYTk4NzAyYmY5N2EwMjFkZGMxNGQifQogICAgICAgICAgICAgICAgY29udGVudF9sZW5naHQgPSAoIiYiKS5qb2luKFsgIiVzPSVzIiAlIChrZXksIHZhbHVlKSBmb3Iga2V5LCB2YWx1ZSBpbiBkYXRhLml0ZW1zKCkgXSkKICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7J1VzZXItQWdlbnQnOnVheHgsCidDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKJ3gtZmItQ29ubmVjdGlvbi1UeXBlJzogJ01PQklMRS5MVEUnLAonQWNjZXB0JzogJyovKicsCidIb3N0JzogJ2dyYXBoLmZhY2Vib29rLmNvbScsCidYLUZCLU5ldC1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpKSwKJ1gtRkItU0lNLUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyZTQsIDRlNCkpLAonWC1GYi1Db25uZWN0aW9uLUJhbmR3aWR0aCc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMDAwMCwgMzAwMDAwMDApKSwKJ1ByaW9yaXR5JyA6ICd1PTMsaScsCidaZXJvLVJhdGVkJzogJzAnLAonWC1GYi1Db25uZWN0aW9uLVF1YWxpdHknOiAnR09PRCcsCidYLUZCLUZyaWVuZGx5LU5hbWUnOiAnYXV0aGVudGljYXRlJywKJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6ICdncmFwaHNlcnZpY2UnLAonWC1GYi1EZXZpY2UtR3JvdXAnOiAnNTEyMCcsCidYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJywKJ1gtRkItQ2xpZW50LUlQJzogJ1RydWUnLAonWC1GQi1TZXJ2ZXItQ2x1c3Rlcic6ICdUcnVlJywKJ0NvbnRlbnQtTGVuZ3RoJzogc3RyKGxlbihjb250ZW50X2xlbmdodCkpfQogICAgICAgICAgICAgICAgcSA9IHNlc3Npb24ucG9zdCgiaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vYXV0aC9sb2dpbiIsZGF0YT1kYXRhLCBoZWFkZXJzPWhlYWRlcnMsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSkuanNvbigpCiAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHE6CiAgICAgICAgICAgICAgICAgICAgY2trayA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBxWyJzZXNzaW9uX2Nvb2tpZXMiXSk7TklYYiA9IGJhc2U2NC5iNjRlbmNvZGUob3MudXJhbmRvbSgxOCkpLmRlY29kZSgpLnJlcGxhY2UoIj0iLCIiKS5yZXBsYWNlKCIrIiwiXyIpLnJlcGxhY2UoIi8iLCItIik7Y29va2llID0gZiJzYj17Qk9TU2J9O3tja2trfSIKICAgICAgICAgICAgICAgICAgICBwcmludChmIlxye1J9IFx4MWJbMzg7NTsxOTZtW1wwMzNbMzg7NTs0Nm1CT1NTLfCfkppceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bXtzaWR9IFx4MWJbMTs5Mm3il49ceDFiWzM4OzU7NDZtIHtwc30ge1N9XG49Iz17Y2tra30iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEVsaXRlKHNpZCxwcyxja2trKQogICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoc2lkKQogICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvQk9TUy9PS19pZHNfTTQudHh0JywnYScpLndyaXRlKHNpZCsn4pePJytwcysnXG4nKTtvcGVuKCcvc2RjYXJkL0JPU1MvQ09PS2lFc19NMi50eHQnLCdhJykud3JpdGUoc2lkKyfil48nK3BzKyfil48nK2Nvb2tpZSsnXG4nKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvciddWydtZXNzYWdlJ106CiAgICAgICAgICAgICAgICAgICMgICAgcHJpbnQoZiJcclx4MWJbMTs5Nm0gW0Z1Y2tdIHtzaWR9IHwge3BzfSB7U30iKQogICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoc2lkKQogICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvL0JPU1MvTTQtQ1AudHh0JywnYScpLndyaXRlKHNpZCsn4pePJytwcysnXG4nKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBsb29wKz0xCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgICAgICAgc2VsZi5tZXRob2REKHNpZCwgbmFtZSwgcHMpCiAgICAgICAgICAgCiAgICBkZWYgcGFzdyhzZWxmKTogICAgICAgCiAgICAgICAgICAgIHB3ID0gW10KICAgICAgICAgICAgY2xlYXIoKQogICAgICAgICAgICBwcmludCgnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzkybeKXj1x4MWJbMzg7NTsxOTZtXSBcMDMzWzM4OzU7NDZtSG93IG1hbnkgcGFzc3dvcmRzIGRvIHlvdSB3YW50IHRvIGFkZCcpCiAgICAgICAgICAgIHNsID0gaW50KGlucHV0KCdceDFiWzM4OzU7MTk2bVtceDFiWzE7OTJt4pePXHgxYlszODs1OzE5Nm1dXDAzM1szODs1OzQ2bVB1dCBMaW1pdCBceDFiWzE7OTJt4pePICAnKSkKICAgICAgICAgICAgaWYgc2wgPT0nJzoKICAgICAgICAgICAgICAgIHByaW50KCdcblx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5Mm3il49ceDFiWzM4OzU7MTk2bV1cMDMzWzM4OzU7NDZtUHV0IGxpbWl0IGJldHdlZW4gMSB0byAzMCcpCiAgICAgICAgICAgIGVsaWYgc2wgPiAyMDoKICAgICAgICAgICAgICAgIHByaW50KCdcblx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5Mm3il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7MTk2bVBhc3N3b3JkIGxpbWl0IFNob3VsZCBOb3QgQmUgR3JlYXRlciBUaGFuIDMwJykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGZvciBzciBpbiByYW5nZShzbCk6CiAgICAgICAgICAgICAgICAgICAgcHcuYXBwZW5kKGlucHV0KGYnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzkybeKXj1x4MWJbMzg7NTsxOTZtXVwwMzNbMzg7NTs0Nm1QdXQgUGFzc3dvcmQge3NyKzF9XHgxYlsxOzkybSDil48gICcpKQogICAgICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgICAgICAgICAgcHJpbnQobG9nbykKICAgICAgICAgICAgcHJpbnQoZicgVE9UQUwgSURTIEZPUiBDTE9ORSAgOlwwMzNbMzg7NTs0Nm0gJXMgJyAlIGxlbihzZWxmLmlkKSkKICAgICAgICAgICAgcHJpbnQoZidceDFiWzE7OTJt4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBJykKICAgICAgICAgICAgcHJpbnQoIlx4MWJbMzg7NTs0Nm1Vc2UgQWlycGxhbmUgTW9kZSBNb3JlICBPSyBJRFMiKQogICAgICAgICAgICBmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQogICAgICAgICAgICBub3cgPSBkYXRldGltZS5ub3coKQogICAgICAgICAgICBjdXJyZW50X3RpbWUgPSBub3cuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgICAgICAgcHJpbnQoIlx4MWJbMzg7NTs0Nm1DbG9uZWluZyBTdGFydCBUaW1lIFx4MWJbMTs5Mm3il49ceDFiWzM4OzU7NDZtICIsIGN1cnJlbnRfdGltZSkKICAgICAgICAgICAgcHJpbnQoIlx4MWJbMTs5Mm3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiKQogICAgICAgICAgICB3aXRoIFNpYW1OSVgobWF4X3dvcmtlcnM9MzApIGFzIE5JWHdvcmxkOgogICAgICAgICAgICAgICAgZm9yIHpzYiBpbiBzZWxmLmlkOgogICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgIHVpZCwgbmFtZSA9IHpzYi5zcGxpdCgnfCcpCiAgICAgICAgICAgICAgICAgICAgICAgc3ogPSBuYW1lLnNwbGl0KCcgJykKICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oc3opID09IDMgb3IgbGVuKHN6KSA9PSA0IG9yIGxlbihzeikgPT0gNSBvciBsZW4oc3opID09IDg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9ICBwdwogICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSAgcHcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdtZXRob2RBJyBpbiBtZXRob2RzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5JWHdvcmxkLnN1Ym1pdChzZWxmLm1ldGhvZEEsIHVpZCwgbmFtZSwgcHd4KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnbWV0aG9kQicgaW4gbWV0aG9kczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOSVh3b3JsZC5zdWJtaXQoc2VsZi5tZXRob2RCLCB1aWQsIG5hbWUsIHB3eCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ21ldGhvZEMnIGluIG1ldGhvZHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTklYd29ybGQuc3VibWl0KHNlbGYubWV0aG9kQywgdWlkLCBuYW1lLCBwd3gpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICdtZXRob2REJyBpbiBtZXRob2RzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5JWHdvcmxkLnN1Ym1pdChzZWxmLm1ldGhvZEQsIHVpZCwgbmFtZSwgcHd4KQogICAgICAgICAgICAgICAgICAgZXhjZXB0OnBhc3MKICAgICAgICAgICAgcmVzdWx0KG9rcyxjcHMpCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwpkZWYgQUZHX0NMT05JTkcoKToKICAgIHVzZXI9W10KICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQobG9nbykKICAgIHByaW50KCcgRVhBTVBMRSBBTlkgQ09VTlRSWSBTSU0gQ09ERScpCiAgICBsaW5leCgpCiAgICBrb2RlID0gaW5wdXQoJyBDSE9TRSBTSU0gQ09ERSA6ID09PicpCiAgICBsaW5leCgpCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50KGxvZ28pCiAgICBwcmludCgnIEVYQU1QTEUgTElNSVQgWzUwMDBdIFsxMDAwMF0gWzUwMDAwXSBbOTk5OTk5XScpCiAgICBsaW5leCgpCiAgICBsaW1pdCA9IGludChpbnB1dCgnIElOUFVUICBMRU1JVCA6ICcpKQogICAgcHJpbnQoNDYqJy0nKQogICAgZm9yIG5tYnIgaW4gcmFuZ2UobGltaXQpOgogICAgICAgIG5tcCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg3KSkKICAgICAgICB1c2VyLmFwcGVuZChubXApCiAgICB3aXRoIFRocmVhZFBvb2wobWF4X3dvcmtlcnM9NzApIGFzIEFyeWFuOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50KGxvZ28pCiAgICAgICAgdGwgPSBzdHIobGVuKHVzZXIpKQogICAgICAgIHByaW50KCcgQ0hPSUNFICBBQ09VTlRTIDogJyt0bCkKICAgICAgICBwcmludCgnIENIT0lDRSBTSU0gIENPREUgOlx4MWJbMTs5Mm0gJytrb2RlKQogICAgICAgIHByaW50KCdceDFiWzE7OTJtIFRIRSBQUk9DRVNTIElTIFJVTk5JTkcgSU4gVEhFIEJBQ0tHUk9VTkQgUExaIFdBSVQnKQogICAgICAgIGxpbmV4KCkKICAgICAgICBmb3IgZ3VydSBpbiB1c2VyOgogICAgICAgICAgICB1aWQgPSBrb2RlK2d1cnUKICAgICAgICAgICAgcHd4PVtndXJ1K2d1cnUsJ9ux27Lbs9u027XbticsJ0FmZ2hhbmlzdGFuJywn27Hbstuz27Tbtdu227fbuNu5Jywna2FidWwxMjMnLCdBZmdoYW4xMjMnLCcxMDAwMjAwMCcsJzcwMDgwMCcsJ0FmZ2hhbjEyMzQ1JywnNTAwMDYwMDAnLCc1NzU3MzIwMCcsJzU3MjcyMDAnLCc0NDY2ODgnLCdmaXJzdCBsYXN0J10KICAgICAgICAgICAgQXJ5YW4uc3VibWl0KHJjcmFjayx1aWQscHd4LHRsKQogICAgcHJpbnQoNDYqJy0nKQogICAgcHJpbnQoJ0lEWiBTQVZFRCBJTiBPSy50eHQgOiBDUC50eHQnKQogICAgcHJpbnQoNDYqJy0nKQogICAgcHJpbnQoJ1RIRSBQUk9DRVNTIEhBUyBCRUVOIENPTVBMRVRFRCcpCiAgICBpbnB1dCgnUFJFU1MgRU5URVIgVE8gQkFDSyAnKQogICAgRU1SQU4oKQojLS0tLS0tLS0tLWRlZiBjcmFjay0tLS0tLS0tLS0tLS0tLS0jCmRlZiByY3JhY2sodWlkLHB3eCx0bCk6CiAgICAjcHJpbnQodXNlcikKICAgIGdsb2JhbCBsb29wCiAgICBnbG9iYWwgY3BzCiAgICBnbG9iYWwgb2tzCiAgICBnbG9iYWwgcHJveHkKICAgIHRyeToKICAgICAgICBmb3IgcHMgaW4gcHd4OgogICAgICAgICAgICBwcm8gPSByYW5kb20uY2hvaWNlKHVnZW4pCiAgICAgICAgICAgIHNlc3Npb24gPSByZXF1ZXN0cy5TZXNzaW9uKCkKICAgICAgICAgICAgZnJlZV9mYiA9IHNlc3Npb24uZ2V0KCdodHRwczovL20uZmFjZWJvb2suY29tJykudGV4dAogICAgICAgICAgICBsb2dfZGF0YSA9IHsKICAgICAgICAgICJsc2QiOnJlLnNlYXJjaCgnbmFtZT0ibHNkIiB2YWx1ZT0iKC4qPykiJywgc3RyKGZyZWVfZmIpKS5ncm91cCgxKSwKICAgICAgICAgICAgImphem9lc3QiOnJlLnNlYXJjaCgnbmFtZT0iamF6b2VzdCIgdmFsdWU9IiguKj8pIicsIHN0cihmcmVlX2ZiKSkuZ3JvdXAoMSksCiAgICAgICAgICAgICJtX3RzIjpyZS5zZWFyY2goJ25hbWU9Im1fdHMiIHZhbHVlPSIoLio/KSInLCBzdHIoZnJlZV9mYikpLmdyb3VwKDEpLAogICAgICAgICAgICAibGkiOnJlLnNlYXJjaCgnbmFtZT0ibGkiIHZhbHVlPSIoLio/KSInLCBzdHIoZnJlZV9mYikpLmdyb3VwKDEpLAogICAgICAgICAgICAidHJ5X251bWJlciI6IjAiLAogICAgICAgICAgICAidW5yZWNvZ25pemVkX3RyaWVzIjoiMCIsCiAgICAgICAgICAgICJlbWFpbCI6dWlkLAogICAgICAgICAgICAicGFzcyI6cHMsCiAgICAgICAgICAgICJsb2dpbiI6IkxvZyBJbiJ9CiAgICAgICAgICAgIGhlYWRlcl9mcmVlZmIgPSB7ImF1dGhvcml0eSI6ICdtLmZhY2Vib29rLmNvbScsCiAgICAgICAgICAgICJtZXRob2QiOiAnR0VUJywgICAgICAgICAKICAgICAgICAgICAgInNjaGVtZSI6ICdodHRwcycsCiAgICAgICAgICAgICdhY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC43JywKICAgICdhY2NlcHQtbGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjknLAogICAgJ2NhY2hlLWNvbnRyb2wnOiAnbWF4LWFnZT0wJywKICAgICdkcHInOiAnMycsCiAgICAncmVmZXJlcic6ICdodHRwczovL20uZmFjZWJvb2suY29tLycsCiAgICAnc2VjLWNoLXByZWZlcnMtY29sb3Itc2NoZW1lJzogJ2RhcmsnLAogICAgJ3NlYy1jaC11YSc6ICciTm90X0EgQnJhbmQiO3Y9IjgiLCAiQ2hyb21pdW0iO3Y9IjEyMCInLAogICAgJ3NlYy1jaC11YS1mdWxsLXZlcnNpb24tbGlzdCc6ICciTm90X0EgQnJhbmQiO3Y9IjguMC4wLjAiLCAiQ2hyb21pdW0iO3Y9IjEyMC4wLjYwOTkuMTE2IicsCiAgICAnc2VjLWNoLXVhLW1vYmlsZSc6ICc/MScsCiAgICAnc2VjLWNoLXVhLW1vZGVsJzogJyJJbmZpbml4IFg2NzhCIicsCiAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJBbmRyb2lkIicsCiAgICAnc2VjLWNoLXVhLXBsYXRmb3JtLXZlcnNpb24nOiAnIjEzLjAuMCInLAogICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2RvY3VtZW50JywKICAgICdzZWMtZmV0Y2gtbW9kZSc6ICduYXZpZ2F0ZScsCiAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgJ3NlYy1mZXRjaC11c2VyJzogJz8xJywKICAgICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLAogICAgJ3VzZXItYWdlbnQnOiAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBLKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTIwLjAuMC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKICAgICd2aWV3cG9ydC13aWR0aCc6ICc5ODAnLAp9CgogICAgICAgICAgICBsbyA9IHNlc3Npb24ucG9zdCgnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvbG9naW4vYXN5bmMvJyxkYXRhPWxvZ19kYXRhLGhlYWRlcnM9aGVhZGVyX2ZyZWVmYikudGV4dAogICAgICAgICAgICBsb2dfY29va2llcz1zZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5rZXlzKCkKICAgICAgICAgICAgI3ByaW50KGlpZCsnfCcrcHdzKyd8JytzdHIobG9nX2Nvb2tpZXMpKQogICAgICAgICAgICBpZiAnY191c2VyJyBpbiBsb2dfY29va2llczoKICAgICAgICAgICAgICAgIGNva2k9IjsiLmpvaW4oW2tleSsiPSIrdmFsdWUgZm9yIGtleSx2YWx1ZSBpbiBzZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5pdGVtcygpXSkKICAgICAgICAgICAgICAgIGNpZCA9IGNva2lbMTUxOjE2Nl0KICAgICAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzJtW0JPU1MtT0tdICcrY2lkKycgfCAnK3BzKydcMDMzWzA7OTdtJykKICAgICAgICAgICAgICAgIHByaW50KCdcblvigI7igI7wn5KWXVwwMzNbMDszM20gQ09PS0lFID0gXDAzM1sxOzM0bScrY29raSsgICcgICcnICBcMDMzWzA7OTdtJykKICAgICAgICAgICAgICAgIGxpbmV4KCkKICAgICAgICAgICAgICAgIG9wZW4oJ0JPU1MtT0sudHh0JywgJ2EnKS53cml0ZShjaWQrJyB8ICcrcHMrICdcbicpCiAgICAgICAgICAgICAgICBva3MuYXBwZW5kKGNpZCkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsaWYgJ2NoZWNrcG9pbnQnIGluIGxvZ19jb29raWVzOgogICAgICAgICAgICAgICAgY29raT0iOyIuam9pbihba2V5KyI9Iit2YWx1ZSBmb3Iga2V5LHZhbHVlIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCldKQogICAgICAgICAgICAgICAgY2lkID0gY29raVsxNDE6MTUyXQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszMW1bQk9TUy1DUF0gJyt1aWQrJyB8ICcrcHMrJ1x4MWJbMTs5N20nKQogICAgICAgICAgICAgICAgb3BlbignQk9TUy1DUC50eHQnLCAnYScpLndyaXRlKHVpZCsnIHwgJytwcysnXG4nKQogICAgICAgICAgICAgICAgY3BzLmFwcGVuZChjaWQpCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICBsb29wKz0xCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXDAzM1sxOzkybVtCT1NTXVwwMzNbMTs5Mm1dICVzfFwzM1sxOzMxbVtPS106LSAlcyBcciclKGxvb3AsbGVuKG9rcykpKSwKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgIGV4Y2VwdDoKICAgICAgICBwYXNzIAojIyMjIyMjIyMjIyMgICAgICAgICAgICAKCiMjIyMjIyMjIyMKICAgCmRlZiBtYWluX2FwdigpOgogICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICBwcmludChsb2dvKQogICAgdXVpZCA9IHN0cihvcy5nZXRldWlkKCkpCiAgICBYeXRlZWU9KCdCb3NzMXg2YjdiNWMlczg1YjhuOW5mZGklcyclKHV1aWQsdXVpZCkpCiAgICBwcmludChsb2dvKQogICAgb3Muc3lzdGVtKCJjbGVhciIpO3ByaW50KGxvZ28pCiAgICBwcmludChmIiBZb3VyIEtleSA6IFx4MWJbMTszMW0iK1h5dGVlZSkKICAgIHByaW50KCJceDFiWzE7OTJtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKQogICAgdHJ5OgogICAgICAgIHN5c3RlbSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9naXRodWIuY29tL01lbnRhbDc3Ny9hcHJvdnZhbC50eHQvYmxvYi9tYWluL1NZU1RFTS50eHQiKS50ZXh0IAogICAgICAgIGlmIFh5dGVlZSBpbiBzeXN0ZW06CiAgICAgICAgICAgIHByaW50KCkKICAgICAgICAgICAgbXNnID0gc3RyKG9zLmdldGV1aWQoKSkgCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkgCiAgICAgICAgICAgIG1lbnUoKQogICAgICAgICAgICBwYXNzIAogICAgICAgIGVsc2U6IAogICAgICAgICAgICBwcmludCgnXDAzM1sxOzkybSBOb3cgaXQgd2lsbCB3b3JrIHdlbGwgaW4gYWxsIGNvdW50cmllcycpCiAgICAgICAgICAgIHByaW50KCdcMDMzWzE7OTJtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cMDMzWzE7OTdtJykKICAgICAgICAgICAgI3ByaW50KCdcMDMzWzE7OTJtW1wwMzNbMTs5Mm3igKJcMDMzWzE7OTJtXVwwMzNbMTs5Mm0gTm90ZXMgOiBOaXggVG9vbHMgQ2FuIGJ1eSBpbiBhbGwgY291bnRyaWVzIScpCiAgICAgICAgICAgIHByaW50KCdcMDMzWzE7OTJtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cMDMzWzE7OTdtJykKICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTs5Mm0gW1wwMzNbMTs5Mm0xXDAzM1sxOzkybV1cMDMzWzE7OTJtIDgkIFwwMzNbMTs5Mm1BcHByb3ZhbCBGb3IgMSBtb250aCcpCiAgICAgICAgICAgIHByaW50KCcgXDAzM1sxOzkybVtcMDMzWzE7OTJtMlwwMzNbMTs5Mm1dXDAzM1sxOzkybSA2JCBcMDMzWzE7OTJtQXBwcm92YWwgRm9yIDE1IGRheXMnKQogICAgICAgICAgICBwcmludCgnIFwwMzNbMTs5Mm1bXDAzM1sxOzkybTNcMDMzWzE7OTJtXVwwMzNbMTs5Mm0gMyQgXDAzM1sxOzkybUFwcHJvdmFsIEZvciA3IGRheXMgXDAzM1sxOzM3bScpCiAgICAgICAgICAgIHByaW50KCdcMDMzWzE7OTJtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQogICAgICAgICAgICBQaWNjaGkgPSBpbnB1dCgnIFByZXNzIGVudGVyIDogJykKICAgICAgICAgICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICAgICAgICAgIHByaW50KGxvZ28pCiAgICAgICAgICAgIHByaW50KGYiIFwwMzNbMTs5Mm1Zb3VyIEtleSA6XDAzM1szMTsxbXtYeXRlZWV9IikKICAgICAgICAgICAgcHJpbnQoIlx4MWJbMTs5Mm0gVG9vbHMgICAgOiBGQiBDbG9uaW5nIik7cHJpbnQoIiBcMDMzWzE7OTJtXG4gXDAzM1sxOzkybVwwMzNbMTs5Mm1Ob3RlOiBJZiBZb3UgQXJlIEZyZWUgVXNlciBEb24ndCBDb21lIElCXDAzM1swOzBtIik7cHJpbnQoJ1xuXHgxYlsxOzkybSBb4oCiXSBGaWxlIENyYWNrIFx4MWJbMTs5Mm1cbiBb4oCiXSBSYW5kb20gQ3JhY2sgXG4gW+KAol0gRXhpdCBQcm9ncmFtJykKICAgICAgICAgICAgcHJpbnQoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKICAgICAgICAgICAgdXJsX3dhID0gImh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPSs5MjMyMzkzOTczOTImdGV4dD0iCiAgICAgICAgICAgIGNob2ljZSA9IGlucHV0KCIgRW50ZXIgeW91ciBjaG9pY2UgIDogIikKICAgICAgICAgICAgdGtzID0gKCJIaSBCb3NzIFNpciwgSSBOZWVkIFRvIEJ1eSBZb3VyIEJvc3MgVG9vbHMgVmVyc2lvbiAwLjAuNCBQcmVtaXVtIFBsZWFzZSBBY2NlcHQgTXkgS2V5IFRvIFByZW1pdW1cblxuIE5hbWUgOiAiK2Nob2ljZSsiXG4gS2V5IDogIitYeXRlZWUrIlxuIEJ1eSBTZWxlY3QgOiAiK1BpY2NoaSkKICAgICAgICAgICAgc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJhbSIsICJzdGFydCIsIHVybF93YSsodGtzKV0pO3RpbWUuc2xlZXAoMikKICAgICAgICAgICAgcHJpbnQoJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gUnVuIGFnYWluIHdpdGggcGVybWlzc2lvbiBmcm9tIGFkbWluJykKICAgICAgICAgICAgbWFpbl9hcHYoKQogICAgZXhjZXB0OiAKICAgICAgICBzeXMuZXhpdCgpCgp3aXRoIFNpYW1OSVgobWF4X3dvcmtlcnM9MzApIGFzIHJodToKICMgICByaHUuc3VibWl0KHNleHkpCiAgICByaHUuc3VibWl0KG1haW5fYXB2KQoKCgo='))